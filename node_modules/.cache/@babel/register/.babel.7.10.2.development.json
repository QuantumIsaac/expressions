{
  "{\"sourceRoot\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"filename\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\boolexp.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\boolexp.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\boolexp.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\boolexp.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
        "sourceFileName": "boolexp.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Boolean Expressions Parser/Evaluator\nvar OPERATOR = {\n  // operator precedence\n  '*': {\n    precedence: 2,\n    binary: true,\n    fn: function fn(a, b) {\n      return a && b;\n    }\n  },\n  '+': {\n    precedence: 1,\n    binary: true,\n    fn: function fn(a, b) {\n      return a || b;\n    }\n  },\n  '~': {\n    binary: false,\n    fn: function fn(a) {\n      return !a;\n    }\n  }\n};\n\nvar isOperator = function isOperator(chr) {\n  return Object.keys(OPERATOR).includes(chr);\n};\n\nvar isBinaryOperator = function isBinaryOperator(chr) {\n  return Object.keys(OPERATOR).filter(function (op) {\n    return OPERATOR[op].binary;\n  }).includes(chr);\n};\n\nvar isUnaryOperator = function isUnaryOperator(chr) {\n  return Object.keys(OPERATOR).filter(function (op) {\n    return !OPERATOR[op].binary;\n  }).includes(chr);\n};\n\nvar stackify = function stackify(arr) {\n  arr = arr || [];\n\n  arr.peek = function () {\n    return arr[arr.length - 1];\n  };\n\n  return arr;\n};\n\nvar format = function format(tk) {\n  return typeof tk === 'string' ? {\n    value: tk,\n    children: []\n  } : tk;\n};\n\nvar makeTreeNode = function makeTreeNode(op, a, b) {\n  return {\n    value: op,\n    children: [a, b]\n  };\n}; // Break an expression into discrete tokens\n// for simpler preprocessing and parsing\n\n\nvar tokenize = function tokenize(exp) {\n  var tokens = [];\n  var cur_token = '';\n\n  var push_token = function push_token() {\n    if (cur_token !== '') {\n      tokens.push({\n        value: cur_token,\n        type: 'identifier'\n      });\n      cur_token = '';\n    }\n  };\n\n  var _iterator = _createForOfIteratorHelper(exp),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _char = _step.value;\n\n      if (/[a-zA-Z1-9_]/.test(_char)) {\n        cur_token += _char;\n      } else if (/\\s/.test(_char)) {\n        push_token();\n      } else {\n        push_token();\n\n        if (isOperator(_char)) {\n          tokens.push({\n            value: _char,\n            type: 'operator'\n          });\n        } else tokens.push({\n          value: _char,\n          type: 'unknown'\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  push_token();\n  return tokens;\n}; // TODO: Tokenizing.\n// Tokenize expression first in order to be able to\n// look ahead/behind to verify valid formatting\n// (e.g. to ensure that a binary operator is preceded by\n// and followed by literals or expressions rather than\n// another binary operator)\n\n\nvar parseExpression = function parseExpression(exp) {\n  var operator_stack = stackify();\n  var operand_stack = stackify();\n  var unique_tokens = [];\n  var unaryOp = 0;\n\n  var aggregateUnaryOp = function aggregateUnaryOp() {\n    while (unaryOp > 0) {\n      var op = operator_stack.pop();\n      var operand = operand_stack.pop();\n      operand_stack.push({\n        value: op,\n        children: [format(operand)]\n      });\n      unaryOp--;\n    }\n  };\n\n  var tokens = tokenize(exp);\n  console.log(tokens);\n\n  var getToken = function getToken(idx) {\n    return idx >= 0 && idx < tokens.length ? tokens[idx] : null;\n  };\n\n  var assert = function assert(bool, msg) {\n    if (!bool) throw new Error(msg);\n  }; // check if expression is valid\n\n\n  var parenValid = 0;\n\n  for (var t = 0; t < tokens.length; t++) {\n    var token = tokens[t];\n\n    if (token.type === 'operator') {\n      if (isBinaryOperator(token.value)) {\n        var prevToken = getToken(t - 1);\n        assert(prevToken !== null, \"Binary operator must have a left-hand operand.\");\n        assert(prevToken.type === 'identifier' || prevToken.value === ')', \"Binary operator may not be directly preceded by an operator.\"); // either identifier or expression\n\n        var valid = false;\n        var tk = t + 1;\n\n        while (getToken(tk) !== null && !valid) {\n          if (isBinaryOperator(getToken(tk))) break;else if (getToken(tk).type === 'identifier' || getToken(tk).value === '(') valid = true;\n          tk++;\n        }\n\n        assert(valid, \"Binary operators may not be adjacent to one another.\");\n      } else {\n        var t2 = t + 1;\n        var operates = false;\n\n        while (!operates && getToken(t2) !== null) {\n          var cur = getToken(t2++);\n          operates = cur.type === 'identifier' || cur.value === '(';\n        }\n\n        assert(\"Unary operator must operate on an identifier or expression.\");\n      }\n    } else if (token.type === 'identifier') {\n      var prevCheckToken = t - 1;\n      var _valid = true;\n\n      while (_valid && getToken(prevCheckToken) !== null) {\n        var _tk = getToken(prevCheckToken--);\n\n        if (isBinaryOperator(_tk.value)) break;else if (_tk.type === 'identifier' || _tk.value === ')') _valid = false;\n      }\n\n      assert(_valid, \"Operands may not be placed adjacent to one another without an operator in between.\");\n    } else {\n      if (token.value === '(') {\n        parenValid++;\n      } else if (token.value === ')') {\n        assert(parenValid !== 0, \"Mismatched closing parenthesis.\");\n        parenValid--;\n      }\n    }\n  }\n\n  assert(parenValid === 0, \"Unclosed parenthesis in expression!\");\n  var grabbingExpression = false;\n  var expression = '';\n  var expParen = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(tokens),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _token = _step2.value;\n\n      // first check if grabbing expression\n      if (grabbingExpression) {\n        if (_token.value === '(') {\n          expParen++;\n          expression += '(';\n        } else if (_token.value === ')') {\n          expParen--;\n\n          if (expParen === 0) {\n            var _exp = parseExpression(expression);\n\n            var exp_tk = _exp.tokens;\n\n            var _iterator3 = _createForOfIteratorHelper(exp_tk),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _tk2 = _step3.value;\n                if (!unique_tokens.includes(_tk2)) unique_tokens.push(_tk2);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            delete _exp.tokens; // remove extraneous data from internal tree nodes\n\n            operand_stack.push(_exp);\n            aggregateUnaryOp();\n            expression = '';\n            grabbingExpression = false;\n          } else {\n            expression += ')';\n          }\n        } else expression += _token.value;\n\n        continue;\n      }\n\n      if (_token.type === 'identifier') {\n        operand_stack.push(_token.value);\n        aggregateUnaryOp();\n        if (!unique_tokens.includes(_token.value)) unique_tokens.push(_token.value);\n      } else if (isBinaryOperator(_token.value)) {\n        if (operator_stack.length > 0 && OPERATOR[_token.value].precedence < OPERATOR[operator_stack.peek()].precedence) {\n          var operands = [operand_stack.pop()];\n          var operators = [];\n          var prec = OPERATOR[operator_stack.peek()].precedence;\n\n          while (OPERATOR[operator_stack.peek()].precedence === prec) {\n            operands.push(operand_stack.pop());\n            operators.push(operator_stack.pop());\n          }\n\n          while (operators.length > 0) {\n            var new_operand = makeTreeNode(operators.pop(), operands.pop(), operands.pop());\n            operands.push(new_operand);\n          }\n\n          operand_stack.push(operands[0]);\n        }\n\n        operator_stack.push(_token.value);\n      } else if (isUnaryOperator(_token.value)) {\n        unaryOp++;\n        operator_stack.push(_token.value);\n      } else if (_token.value === '(') {\n        grabbingExpression = true;\n        expParen++;\n      } else {\n        throw new Error(\"Unexpected character '\".concat(_token.value, \"'\"));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (grabbingExpression) {\n    throw new Error('Expression contains unmatched opening parenthesis.');\n  }\n\n  while (operator_stack.length > 0) {\n    var op1 = format(operand_stack.pop());\n    var op2 = format(operand_stack.pop());\n    var op = operator_stack.pop();\n    operand_stack.push(makeTreeNode(op, op1, op2));\n  }\n\n  if (operand_stack.length > 1) {\n    throw new Error('Too many operands!');\n  }\n\n  var retObj = format(operand_stack[0]);\n  retObj.tokens = unique_tokens;\n  return operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nvar Expression = /*#__PURE__*/function () {\n  function Expression(exp) {\n    _classCallCheck(this, Expression);\n\n    if (typeof exp !== 'string') {\n      throw new Error(\"Expression constructor takes in a boolean expression.\");\n    }\n\n    this.tree = parseExpression(exp);\n  }\n\n  _createClass(Expression, [{\n    key: \"getTokens\",\n    value: function getTokens() {\n      return this.tree.tokens;\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(values) {\n      var _iterator4 = _createForOfIteratorHelper(this.tree.tokens),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var token = _step4.value;\n          if (!values.hasOwnProperty(token)) throw new Error(\"values must define a boolean value for every variable.\");\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return evaluateTree(this.tree, values);\n    }\n  }]);\n\n  return Expression;\n}();\n\nfunction evaluateTree(treeHead, values) {\n  var v = treeHead.value;\n\n  if (isOperator(v)) {\n    var children = treeHead.children.map(function (t) {\n      return evaluateTree(t, values);\n    });\n    var opfn = OPERATOR[v].fn;\n    return opfn.apply(void 0, _toConsumableArray(children));\n  } else {\n    return values[v];\n  }\n}\n\n;\nvar _default = Expression;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "boolexp.js"
      ],
      "names": [
        "OPERATOR",
        "precedence",
        "binary",
        "fn",
        "a",
        "b",
        "isOperator",
        "chr",
        "Object",
        "keys",
        "includes",
        "isBinaryOperator",
        "filter",
        "op",
        "isUnaryOperator",
        "stackify",
        "arr",
        "peek",
        "length",
        "format",
        "tk",
        "value",
        "children",
        "makeTreeNode",
        "tokenize",
        "exp",
        "tokens",
        "cur_token",
        "push_token",
        "push",
        "type",
        "char",
        "test",
        "parseExpression",
        "operator_stack",
        "operand_stack",
        "unique_tokens",
        "unaryOp",
        "aggregateUnaryOp",
        "pop",
        "operand",
        "console",
        "log",
        "getToken",
        "idx",
        "assert",
        "bool",
        "msg",
        "Error",
        "parenValid",
        "t",
        "token",
        "prevToken",
        "valid",
        "t2",
        "operates",
        "cur",
        "prevCheckToken",
        "grabbingExpression",
        "expression",
        "expParen",
        "exp_tk",
        "operands",
        "operators",
        "prec",
        "new_operand",
        "op1",
        "op2",
        "retObj",
        "Expression",
        "tree",
        "values",
        "hasOwnProperty",
        "evaluateTree",
        "treeHead",
        "v",
        "map",
        "opfn"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "sourcesContent": [
        "// Boolean Expressions Parser/Evaluator\r\n\r\nconst OPERATOR = {\r\n\t// operator precedence\r\n\t'*': {\r\n        precedence: 2,\r\n        binary: true,\r\n\t\tfn: (a, b) => a && b\r\n\t},\r\n\t'+': {\r\n        precedence: 1,\r\n        binary: true,\r\n\t\tfn: (a, b) => a || b\r\n    },\r\n    '~': {\r\n        binary: false,\r\n        fn: a => !a\r\n    }\r\n};\r\n\r\nconst isOperator = chr => Object.keys(OPERATOR).includes(chr);\r\nconst isBinaryOperator = chr => Object.keys(OPERATOR).filter(op => OPERATOR[op].binary).includes(chr);\r\nconst isUnaryOperator = chr => Object.keys(OPERATOR).filter(op => !OPERATOR[op].binary).includes(chr);\r\nconst stackify = arr => {\r\n\tarr = arr || [];\r\n\tarr.peek = () => arr[arr.length-1];\r\n\treturn arr;\r\n};\r\n\r\nconst format = (tk) => typeof tk === 'string' ? { value: tk, children: [] } : tk;\r\n\r\nconst makeTreeNode = (op, a, b) => {\r\n\treturn {\r\n\t\tvalue: op,\r\n\t\tchildren: [a, b]\r\n\t}\r\n};\r\n\r\n// Break an expression into discrete tokens\r\n// for simpler preprocessing and parsing\r\nconst tokenize = exp => {\r\n\tlet tokens = [];\r\n\r\n\tlet cur_token = '';\r\n\tconst push_token = () => {\r\n\t\tif( cur_token !== '' ) {\r\n\t\t\ttokens.push({\r\n\t\t\t\tvalue: cur_token,\r\n\t\t\t\ttype: 'identifier'\r\n\t\t\t});\r\n\t\t\tcur_token = '';\r\n\t\t}\r\n\t};\r\n\r\n\tfor( let char of exp ) {\r\n\t\tif( /[a-zA-Z1-9_]/.test(char) ) {\r\n\t\t\tcur_token += char;\r\n\t\t} else if( /\\s/.test(char) ) {\r\n\t\t\tpush_token();\r\n\t\t} else {\r\n\t\t\tpush_token();\r\n\t\t\tif( isOperator(char) ) {\r\n\t\t\t\ttokens.push({\r\n\t\t\t\t\tvalue: char,\r\n\t\t\t\t\ttype: 'operator'\r\n\t\t\t\t});\r\n\t\t\t} else tokens.push({\r\n\t\t\t\tvalue: char,\r\n\t\t\t\ttype: 'unknown'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpush_token();\r\n\r\n\treturn tokens;\r\n};\r\n\r\n// TODO: Tokenizing.\r\n// Tokenize expression first in order to be able to\r\n// look ahead/behind to verify valid formatting\r\n// (e.g. to ensure that a binary operator is preceded by\r\n// and followed by literals or expressions rather than\r\n// another binary operator)\r\n\r\nconst parseExpression = exp => {\r\n\tconst operator_stack = stackify();\r\n\tconst operand_stack = stackify();\r\n\r\n\tlet unique_tokens = [];\r\n\r\n\tlet unaryOp = 0;\r\n    const aggregateUnaryOp = () => {\r\n        while( unaryOp > 0 ) {\r\n            let op = operator_stack.pop();\r\n            let operand = operand_stack.pop();\r\n            operand_stack.push({\r\n                value: op,\r\n                children: [format(operand)]\r\n            });\r\n            unaryOp--;\r\n        }\r\n\t};\r\n\t\r\n\tlet tokens = tokenize(exp);\r\n\r\n\tconsole.log(tokens);\r\n\r\n\tlet getToken = idx => (idx >= 0 && idx < tokens.length) ? tokens[idx] : null;\r\n\tlet assert = (bool, msg) => {\r\n\t\tif( !bool ) throw new Error(msg);\r\n\t};\r\n\r\n\t// check if expression is valid\r\n\tlet parenValid = 0;\r\n\tfor( let t = 0; t < tokens.length; t++ ) {\r\n\t\tlet token = tokens[t];\r\n\t\tif( token.type === 'operator' ) {\r\n\t\t\tif( isBinaryOperator(token.value) ) {\r\n\t\t\t\tlet prevToken = getToken(t-1);\r\n\t\t\t\tassert(prevToken !== null, \"Binary operator must have a left-hand operand.\");\r\n\t\t\t\tassert(prevToken.type === 'identifier' || prevToken.value === ')', \"Binary operator may not be directly preceded by an operator.\"); // either identifier or expression\r\n\r\n\t\t\t\tlet valid = false;\r\n\t\t\t\tlet tk = t+1;\r\n\t\t\t\twhile( getToken(tk) !== null && !valid ) {\r\n\t\t\t\t\tif( isBinaryOperator(getToken(tk)) ) break;\r\n\t\t\t\t\telse if( getToken(tk).type === 'identifier' || getToken(tk).value === '(' ) valid = true;\r\n\t\t\t\t\ttk++;\r\n\t\t\t\t}\r\n\t\t\t\tassert(valid, \"Binary operators may not be adjacent to one another.\");\r\n\t\t\t} else {\r\n\t\t\t\tlet t2 = t+1;\r\n\t\t\t\tlet operates = false;\r\n\t\t\t\twhile( !operates && getToken(t2) !== null ) {\r\n\t\t\t\t\tlet cur = getToken(t2++);\r\n\t\t\t\t\toperates = cur.type === 'identifier' || cur.value === '(';\r\n\t\t\t\t}\r\n\t\t\t\tassert(\"Unary operator must operate on an identifier or expression.\");\r\n\t\t\t}\r\n\t\t} else if( token.type === 'identifier' ) {\r\n\t\t\tlet prevCheckToken = t-1;\r\n\t\t\tlet valid = true;\r\n\t\t\twhile( valid && getToken(prevCheckToken) !== null ) {\r\n\t\t\t\tlet tk = getToken(prevCheckToken--);\r\n\t\t\t\tif( isBinaryOperator(tk.value) ) break;\r\n\t\t\t\telse if( tk.type === 'identifier' || tk.value === ')' ) valid = false;\r\n\t\t\t}\r\n\t\t\tassert(valid, \"Operands may not be placed adjacent to one another without an operator in between.\");\r\n\t\t} else {\r\n\t\t\tif( token.value === '(' ) {\r\n\t\t\t\tparenValid++;\r\n\t\t\t} else if( token.value === ')' ) {\r\n\t\t\t\tassert(parenValid !== 0, \"Mismatched closing parenthesis.\");\r\n\t\t\t\tparenValid--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tassert(parenValid === 0, \"Unclosed parenthesis in expression!\");\r\n\r\n\tlet grabbingExpression = false;\r\n\tlet expression = '';\r\n\tlet expParen = 0;\r\n\tfor( let token of tokens ) {\r\n\t\t// first check if grabbing expression\r\n\t\tif( grabbingExpression ) {\r\n\t\t\tif( token.value === '(' ) {\r\n\t\t\t\texpParen++;\r\n\t\t\t\texpression += '(';\r\n\t\t\t} else if( token.value === ')' ) {\r\n\t\t\t\texpParen--;\r\n\t\t\t\tif( expParen === 0 ) {\r\n\t\t\t\t\tlet exp = parseExpression(expression);\r\n                    let exp_tk = exp.tokens;\r\n                    for( let tk of exp_tk ) {\r\n                        if( !unique_tokens.includes(tk) ) unique_tokens.push(tk);\r\n                    }\r\n                    delete exp.tokens; // remove extraneous data from internal tree nodes\r\n                    operand_stack.push(exp);\r\n                    aggregateUnaryOp();\r\n\t\t\t\t\texpression = '';\r\n\t\t\t\t\tgrabbingExpression = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\texpression += ')';\r\n\t\t\t\t}\r\n\t\t\t} else expression += token.value;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\tif( token.type === 'identifier' ) {\r\n\t\t\toperand_stack.push(token.value);\r\n\t\t\taggregateUnaryOp();\r\n\t\t\tif( !unique_tokens.includes(token.value) ) unique_tokens.push(token.value);\r\n\t\t} else if( isBinaryOperator(token.value) ) {\r\n\t\t\tif( operator_stack.length > 0 && OPERATOR[token.value].precedence < OPERATOR[operator_stack.peek()].precedence ) {\r\n\t\t\t\tconst operands = [operand_stack.pop()];\r\n\t\t\t\tconst operators = [];\r\n\t\t\t\tlet prec = OPERATOR[operator_stack.peek()].precedence;\r\n\t\t\t\twhile( OPERATOR[operator_stack.peek()].precedence === prec ) {\r\n\t\t\t\t\toperands.push(operand_stack.pop());\r\n\t\t\t\t\toperators.push(operator_stack.pop());\r\n\t\t\t\t}\r\n\t\t\t\twhile(operators.length > 0) {\r\n\t\t\t\t\tlet new_operand = makeTreeNode(operators.pop(), operands.pop(), operands.pop());\r\n\t\t\t\t\toperands.push(new_operand);\r\n\t\t\t\t}\r\n\t\t\t\toperand_stack.push(operands[0]);\r\n\t\t\t}\r\n\t\t\toperator_stack.push(token.value);\r\n\t\t} else if( isUnaryOperator(token.value) ) {\r\n\t\t\tunaryOp++;\r\n\t\t\toperator_stack.push(token.value);\r\n\t\t} else if( token.value === '(' ) {\r\n\t\t\tgrabbingExpression = true;\r\n\t\t\texpParen++;\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Unexpected character '${token.value}'`);\r\n\t\t}\r\n\t}\r\n\r\n\tif( grabbingExpression ) {\r\n\t\tthrow new Error('Expression contains unmatched opening parenthesis.');\r\n\t}\r\n\r\n\twhile(operator_stack.length > 0) {\r\n\t\tlet op1 = format(operand_stack.pop());\r\n\t\tlet op2 = format(operand_stack.pop());\r\n        let op = operator_stack.pop();\r\n\r\n\t\toperand_stack.push(makeTreeNode(op, op1, op2));\r\n\t}\r\n\tif( operand_stack.length > 1 ) {\r\n\t\tthrow new Error('Too many operands!');\r\n    }\r\n\r\n    let retObj = format(operand_stack[0]);\r\n\tretObj.tokens = unique_tokens;\r\n\r\n\treturn operand_stack[0]; // should be the expression tree (or a single-token string)\r\n};\r\n\r\nclass Expression {\r\n    constructor(exp) {\r\n        if( typeof exp !== 'string' ) {\r\n            throw new Error(\"Expression constructor takes in a boolean expression.\");\r\n        }\r\n        this.tree = parseExpression(exp);\r\n    }\r\n    getTokens() {\r\n        return this.tree.tokens;\r\n    }\r\n    evaluate(values) {\r\n        for( let token of this.tree.tokens ) {\r\n            if( !values.hasOwnProperty(token) ) throw new Error(\"values must define a boolean value for every variable.\");\r\n        }\r\n        return evaluateTree(this.tree, values);\r\n    }\r\n}\r\n\r\nfunction evaluateTree(treeHead, values) {\r\n    let v = treeHead.value;\r\n    if( isOperator(v) ) {\r\n        let children = treeHead.children.map(t => evaluateTree(t, values));\r\n        let opfn = OPERATOR[v].fn;\r\n        return opfn(...children);\r\n    } else {\r\n        return values[v];\r\n    }\r\n};\r\n\r\nexport default Expression;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591332629436
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"filename\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\arithexp.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\arithexp.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\arithexp.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\arithexp.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
        "sourceFileName": "arithexp.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _evaluator = _interopRequireDefault(require(\"./evaluator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar OPERATOR = {\n  // operator precedence\n  '*': {\n    precedence: 2,\n    binary: true,\n    fn: function fn(a, b) {\n      return a * b;\n    }\n  },\n  '+': {\n    precedence: 1,\n    binary: true,\n    fn: function fn(a, b) {\n      return a + b;\n    }\n  },\n  '/': {\n    precedence: 2,\n    binary: true,\n    fn: function fn(a, b) {\n      return a / b;\n    }\n  },\n  '-': {\n    precedence: 1,\n    binary: true,\n    fn: function fn(a, b) {\n      return a - b;\n    }\n  }\n};\nvar ARITHMETIC_EVALUATOR = new _evaluator[\"default\"](OPERATOR);\n\nvar Expression = /*#__PURE__*/function () {\n  function Expression(exp) {\n    _classCallCheck(this, Expression);\n\n    if (typeof exp !== 'string') {\n      throw new Error(\"Expression constructor takes in an arithmetic expression.\");\n    }\n\n    this.tree = ARITHMETIC_EVALUATOR.parser.parse(exp);\n  }\n\n  _createClass(Expression, [{\n    key: \"getTokens\",\n    value: function getTokens() {\n      return this.tree.tokens;\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(values) {\n      var _iterator = _createForOfIteratorHelper(this.tree.tokens),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var token = _step.value;\n          if (!values.hasOwnProperty(token)) throw new Error(\"values must define a numeric value for every variable.\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ARITHMETIC_EVALUATOR.evaluateTree(this.tree, values);\n    }\n  }]);\n\n  return Expression;\n}();\n\nvar _default = Expression;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyaXRoZXhwLmpzIl0sIm5hbWVzIjpbIk9QRVJBVE9SIiwicHJlY2VkZW5jZSIsImJpbmFyeSIsImZuIiwiYSIsImIiLCJBUklUSE1FVElDX0VWQUxVQVRPUiIsIkV2YWx1YXRvciIsIkV4cHJlc3Npb24iLCJleHAiLCJFcnJvciIsInRyZWUiLCJwYXJzZXIiLCJwYXJzZSIsInRva2VucyIsInZhbHVlcyIsInRva2VuIiwiaGFzT3duUHJvcGVydHkiLCJldmFsdWF0ZVRyZWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFFBQVEsR0FBRztBQUNoQjtBQUNBLE9BQUs7QUFDRUMsSUFBQUEsVUFBVSxFQUFFLENBRGQ7QUFFRUMsSUFBQUEsTUFBTSxFQUFFLElBRlY7QUFHSkMsSUFBQUEsRUFBRSxFQUFFLFlBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGFBQVVELENBQUMsR0FBR0MsQ0FBZDtBQUFBO0FBSEEsR0FGVztBQU9oQixPQUFLO0FBQ0VKLElBQUFBLFVBQVUsRUFBRSxDQURkO0FBRUVDLElBQUFBLE1BQU0sRUFBRSxJQUZWO0FBR0pDLElBQUFBLEVBQUUsRUFBRSxZQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxhQUFVRCxDQUFDLEdBQUdDLENBQWQ7QUFBQTtBQUhBLEdBUFc7QUFZYixPQUFLO0FBQ0RKLElBQUFBLFVBQVUsRUFBRSxDQURYO0FBRURDLElBQUFBLE1BQU0sRUFBRSxJQUZQO0FBR0RDLElBQUFBLEVBQUUsRUFBRSxZQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxhQUFVRCxDQUFDLEdBQUdDLENBQWQ7QUFBQTtBQUhILEdBWlE7QUFpQmIsT0FBSztBQUNESixJQUFBQSxVQUFVLEVBQUUsQ0FEWDtBQUVEQyxJQUFBQSxNQUFNLEVBQUUsSUFGUDtBQUdEQyxJQUFBQSxFQUFFLEVBQUUsWUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsYUFBVUQsQ0FBQyxHQUFHQyxDQUFkO0FBQUE7QUFISDtBQWpCUSxDQUFqQjtBQXdCQSxJQUFNQyxvQkFBb0IsR0FBRyxJQUFJQyxxQkFBSixDQUFjUCxRQUFkLENBQTdCOztJQUVNUSxVO0FBQ0Ysc0JBQVlDLEdBQVosRUFBaUI7QUFBQTs7QUFDYixRQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE4QjtBQUMxQixZQUFNLElBQUlDLEtBQUosQ0FBVSwyREFBVixDQUFOO0FBQ0g7O0FBQ0QsU0FBS0MsSUFBTCxHQUFZTCxvQkFBb0IsQ0FBQ00sTUFBckIsQ0FBNEJDLEtBQTVCLENBQWtDSixHQUFsQyxDQUFaO0FBQ0g7Ozs7Z0NBQ1c7QUFDUixhQUFPLEtBQUtFLElBQUwsQ0FBVUcsTUFBakI7QUFDSDs7OzZCQUNRQyxNLEVBQVE7QUFBQSxpREFDSyxLQUFLSixJQUFMLENBQVVHLE1BRGY7QUFBQTs7QUFBQTtBQUNiLDREQUFxQztBQUFBLGNBQTVCRSxLQUE0QjtBQUNqQyxjQUFJLENBQUNELE1BQU0sQ0FBQ0UsY0FBUCxDQUFzQkQsS0FBdEIsQ0FBTCxFQUFvQyxNQUFNLElBQUlOLEtBQUosQ0FBVSx3REFBVixDQUFOO0FBQ3ZDO0FBSFk7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFJYixhQUFPSixvQkFBb0IsQ0FBQ1ksWUFBckIsQ0FBa0MsS0FBS1AsSUFBdkMsRUFBNkNJLE1BQTdDLENBQVA7QUFDSDs7Ozs7O2VBR1VQLFUiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxxdWFudFxcRGVza3RvcFxcdnNjXFxleHByZXNzaW9uc1xcIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQXJpdGhtZXRpYyBFeHByZXNzaW9ucyBQYXJzZXIvRXZhbHVhdG9yXHJcblxyXG5pbXBvcnQgRXZhbHVhdG9yIGZyb20gJy4vZXZhbHVhdG9yJztcclxuXHJcbmNvbnN0IE9QRVJBVE9SID0ge1xyXG5cdC8vIG9wZXJhdG9yIHByZWNlZGVuY2VcclxuXHQnKic6IHtcclxuICAgICAgICBwcmVjZWRlbmNlOiAyLFxyXG4gICAgICAgIGJpbmFyeTogdHJ1ZSxcclxuXHRcdGZuOiAoYSwgYikgPT4gYSAqIGJcclxuXHR9LFxyXG5cdCcrJzoge1xyXG4gICAgICAgIHByZWNlZGVuY2U6IDEsXHJcbiAgICAgICAgYmluYXJ5OiB0cnVlLFxyXG5cdFx0Zm46IChhLCBiKSA9PiBhICsgYlxyXG4gICAgfSxcclxuICAgICcvJzoge1xyXG4gICAgICAgIHByZWNlZGVuY2U6IDIsXHJcbiAgICAgICAgYmluYXJ5OiB0cnVlLFxyXG4gICAgICAgIGZuOiAoYSwgYikgPT4gYSAvIGJcclxuICAgIH0sXHJcbiAgICAnLSc6IHtcclxuICAgICAgICBwcmVjZWRlbmNlOiAxLFxyXG4gICAgICAgIGJpbmFyeTogdHJ1ZSxcclxuICAgICAgICBmbjogKGEsIGIpID0+IGEgLSBiXHJcbiAgICB9XHJcbn07XHJcblxyXG5jb25zdCBBUklUSE1FVElDX0VWQUxVQVRPUiA9IG5ldyBFdmFsdWF0b3IoT1BFUkFUT1IpO1xyXG5cclxuY2xhc3MgRXhwcmVzc2lvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihleHApIHtcclxuICAgICAgICBpZiggdHlwZW9mIGV4cCAhPT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cHJlc3Npb24gY29uc3RydWN0b3IgdGFrZXMgaW4gYW4gYXJpdGhtZXRpYyBleHByZXNzaW9uLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50cmVlID0gQVJJVEhNRVRJQ19FVkFMVUFUT1IucGFyc2VyLnBhcnNlKGV4cCk7XHJcbiAgICB9XHJcbiAgICBnZXRUb2tlbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlZS50b2tlbnM7XHJcbiAgICB9XHJcbiAgICBldmFsdWF0ZSh2YWx1ZXMpIHtcclxuICAgICAgICBmb3IoIGxldCB0b2tlbiBvZiB0aGlzLnRyZWUudG9rZW5zICkge1xyXG4gICAgICAgICAgICBpZiggIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh0b2tlbikgKSB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZXMgbXVzdCBkZWZpbmUgYSBudW1lcmljIHZhbHVlIGZvciBldmVyeSB2YXJpYWJsZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBUklUSE1FVElDX0VWQUxVQVRPUi5ldmFsdWF0ZVRyZWUodGhpcy50cmVlLCB2YWx1ZXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFeHByZXNzaW9uOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "arithexp.js"
      ],
      "names": [
        "OPERATOR",
        "precedence",
        "binary",
        "fn",
        "a",
        "b",
        "ARITHMETIC_EVALUATOR",
        "Evaluator",
        "Expression",
        "exp",
        "Error",
        "tree",
        "parser",
        "parse",
        "tokens",
        "values",
        "token",
        "hasOwnProperty",
        "evaluateTree"
      ],
      "mappings": ";;;;;;;AAEA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG;AAChB;AACA,OAAK;AACEC,IAAAA,UAAU,EAAE,CADd;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGJC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHA,GAFW;AAOhB,OAAK;AACEJ,IAAAA,UAAU,EAAE,CADd;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGJC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHA,GAPW;AAYb,OAAK;AACDJ,IAAAA,UAAU,EAAE,CADX;AAEDC,IAAAA,MAAM,EAAE,IAFP;AAGDC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHH,GAZQ;AAiBb,OAAK;AACDJ,IAAAA,UAAU,EAAE,CADX;AAEDC,IAAAA,MAAM,EAAE,IAFP;AAGDC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHH;AAjBQ,CAAjB;AAwBA,IAAMC,oBAAoB,GAAG,IAAIC,qBAAJ,CAAcP,QAAd,CAA7B;;IAEMQ,U;AACF,sBAAYC,GAAZ,EAAiB;AAAA;;AACb,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA8B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH;;AACD,SAAKC,IAAL,GAAYL,oBAAoB,CAACM,MAArB,CAA4BC,KAA5B,CAAkCJ,GAAlC,CAAZ;AACH;;;;gCACW;AACR,aAAO,KAAKE,IAAL,CAAUG,MAAjB;AACH;;;6BACQC,M,EAAQ;AAAA,iDACK,KAAKJ,IAAL,CAAUG,MADf;AAAA;;AAAA;AACb,4DAAqC;AAAA,cAA5BE,KAA4B;AACjC,cAAI,CAACD,MAAM,CAACE,cAAP,CAAsBD,KAAtB,CAAL,EAAoC,MAAM,IAAIN,KAAJ,CAAU,wDAAV,CAAN;AACvC;AAHY;AAAA;AAAA;AAAA;AAAA;;AAIb,aAAOJ,oBAAoB,CAACY,YAArB,CAAkC,KAAKP,IAAvC,EAA6CI,MAA7C,CAAP;AACH;;;;;;eAGUP,U",
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "sourcesContent": [
        "// Arithmetic Expressions Parser/Evaluator\r\n\r\nimport Evaluator from './evaluator';\r\n\r\nconst OPERATOR = {\r\n\t// operator precedence\r\n\t'*': {\r\n        precedence: 2,\r\n        binary: true,\r\n\t\tfn: (a, b) => a * b\r\n\t},\r\n\t'+': {\r\n        precedence: 1,\r\n        binary: true,\r\n\t\tfn: (a, b) => a + b\r\n    },\r\n    '/': {\r\n        precedence: 2,\r\n        binary: true,\r\n        fn: (a, b) => a / b\r\n    },\r\n    '-': {\r\n        precedence: 1,\r\n        binary: true,\r\n        fn: (a, b) => a - b\r\n    }\r\n};\r\n\r\nconst ARITHMETIC_EVALUATOR = new Evaluator(OPERATOR);\r\n\r\nclass Expression {\r\n    constructor(exp) {\r\n        if( typeof exp !== 'string' ) {\r\n            throw new Error(\"Expression constructor takes in an arithmetic expression.\");\r\n        }\r\n        this.tree = ARITHMETIC_EVALUATOR.parser.parse(exp);\r\n    }\r\n    getTokens() {\r\n        return this.tree.tokens;\r\n    }\r\n    evaluate(values) {\r\n        for( let token of this.tree.tokens ) {\r\n            if( !values.hasOwnProperty(token) ) throw new Error(\"values must define a numeric value for every variable.\");\r\n        }\r\n        return ARITHMETIC_EVALUATOR.evaluateTree(this.tree, values);\r\n    }\r\n}\r\n\r\nexport default Expression;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591335729618
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"filename\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\evaluator.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\evaluator.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\evaluator.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\evaluator.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
        "sourceFileName": "evaluator.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _evaluateTree(operators, treeHead, values) {\n  var isOperator = function isOperator(ch) {\n    return Object.keys(operators).includes(ch);\n  };\n\n  var v = treeHead.value;\n\n  if (isOperator(v)) {\n    var children = treeHead.children.map(function (t) {\n      return _evaluateTree(operators, t, values);\n    });\n    var opfn = operators[v].fn;\n    return opfn.apply(void 0, _toConsumableArray(children));\n  } else {\n    return values[v];\n  }\n}\n\n;\n\nvar Evaluator = /*#__PURE__*/function () {\n  function Evaluator(operators) {\n    _classCallCheck(this, Evaluator);\n\n    this._op = operators;\n    this.parser = new _parser[\"default\"](operators);\n  }\n\n  _createClass(Evaluator, [{\n    key: \"evaluate\",\n    value: function evaluate(exp, values) {\n      return this.evaluateTree(this.parser.parse(exp), values);\n    }\n  }, {\n    key: \"evaluateTree\",\n    value: function evaluateTree(tree, values) {\n      return _evaluateTree(this._op, tree, values);\n    }\n  }]);\n\n  return Evaluator;\n}();\n\nvar _default = Evaluator;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2YWx1YXRvci5qcyJdLCJuYW1lcyI6WyJldmFsdWF0ZVRyZWUiLCJvcGVyYXRvcnMiLCJ0cmVlSGVhZCIsInZhbHVlcyIsImlzT3BlcmF0b3IiLCJjaCIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsInYiLCJ2YWx1ZSIsImNoaWxkcmVuIiwibWFwIiwidCIsIm9wZm4iLCJmbiIsIkV2YWx1YXRvciIsIl9vcCIsInBhcnNlciIsIlBhcnNlciIsImV4cCIsInBhcnNlIiwidHJlZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsU0FBU0EsYUFBVCxDQUFzQkMsU0FBdEIsRUFBaUNDLFFBQWpDLEVBQTJDQyxNQUEzQyxFQUFtRDtBQUMvQyxNQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBQyxFQUFFO0FBQUEsV0FBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlOLFNBQVosRUFBdUJPLFFBQXZCLENBQWdDSCxFQUFoQyxDQUFKO0FBQUEsR0FBckI7O0FBQ0EsTUFBSUksQ0FBQyxHQUFHUCxRQUFRLENBQUNRLEtBQWpCOztBQUNBLE1BQUlOLFVBQVUsQ0FBQ0ssQ0FBRCxDQUFkLEVBQW9CO0FBQ2hCLFFBQUlFLFFBQVEsR0FBR1QsUUFBUSxDQUFDUyxRQUFULENBQWtCQyxHQUFsQixDQUFzQixVQUFBQyxDQUFDO0FBQUEsYUFBSWIsYUFBWSxDQUFDQyxTQUFELEVBQVlZLENBQVosRUFBZVYsTUFBZixDQUFoQjtBQUFBLEtBQXZCLENBQWY7QUFDQSxRQUFJVyxJQUFJLEdBQUdiLFNBQVMsQ0FBQ1EsQ0FBRCxDQUFULENBQWFNLEVBQXhCO0FBQ0EsV0FBT0QsSUFBSSxNQUFKLDRCQUFRSCxRQUFSLEVBQVA7QUFDSCxHQUpELE1BSU87QUFDSCxXQUFPUixNQUFNLENBQUNNLENBQUQsQ0FBYjtBQUNIO0FBQ0o7O0FBQUE7O0lBRUtPLFM7QUFDRixxQkFBWWYsU0FBWixFQUF1QjtBQUFBOztBQUNuQixTQUFLZ0IsR0FBTCxHQUFXaEIsU0FBWDtBQUNBLFNBQUtpQixNQUFMLEdBQWMsSUFBSUMsa0JBQUosQ0FBV2xCLFNBQVgsQ0FBZDtBQUNIOzs7OzZCQUNRbUIsRyxFQUFLakIsTSxFQUFRO0FBQ2xCLGFBQU8sS0FBS0gsWUFBTCxDQUFrQixLQUFLa0IsTUFBTCxDQUFZRyxLQUFaLENBQWtCRCxHQUFsQixDQUFsQixFQUEwQ2pCLE1BQTFDLENBQVA7QUFDSDs7O2lDQUNZbUIsSSxFQUFNbkIsTSxFQUFRO0FBQ3ZCLGFBQU9ILGFBQVksQ0FBQyxLQUFLaUIsR0FBTixFQUFXSyxJQUFYLEVBQWlCbkIsTUFBakIsQ0FBbkI7QUFDSDs7Ozs7O2VBR1VhLFMiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxxdWFudFxcRGVza3RvcFxcdnNjXFxleHByZXNzaW9uc1xcIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlciBmcm9tICcuL3BhcnNlcic7XHJcblxyXG5mdW5jdGlvbiBldmFsdWF0ZVRyZWUob3BlcmF0b3JzLCB0cmVlSGVhZCwgdmFsdWVzKSB7XHJcbiAgICBjb25zdCBpc09wZXJhdG9yID0gY2ggPT4gT2JqZWN0LmtleXMob3BlcmF0b3JzKS5pbmNsdWRlcyhjaCk7XHJcbiAgICBsZXQgdiA9IHRyZWVIZWFkLnZhbHVlO1xyXG4gICAgaWYoIGlzT3BlcmF0b3IodikgKSB7XHJcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gdHJlZUhlYWQuY2hpbGRyZW4ubWFwKHQgPT4gZXZhbHVhdGVUcmVlKG9wZXJhdG9ycywgdCwgdmFsdWVzKSk7XHJcbiAgICAgICAgbGV0IG9wZm4gPSBvcGVyYXRvcnNbdl0uZm47XHJcbiAgICAgICAgcmV0dXJuIG9wZm4oLi4uY2hpbGRyZW4pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdmFsdWVzW3ZdO1xyXG4gICAgfVxyXG59O1xyXG5cclxuY2xhc3MgRXZhbHVhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG9wZXJhdG9ycykge1xyXG4gICAgICAgIHRoaXMuX29wID0gb3BlcmF0b3JzO1xyXG4gICAgICAgIHRoaXMucGFyc2VyID0gbmV3IFBhcnNlcihvcGVyYXRvcnMpO1xyXG4gICAgfVxyXG4gICAgZXZhbHVhdGUoZXhwLCB2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZVRyZWUodGhpcy5wYXJzZXIucGFyc2UoZXhwKSwgdmFsdWVzKTtcclxuICAgIH1cclxuICAgIGV2YWx1YXRlVHJlZSh0cmVlLCB2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gZXZhbHVhdGVUcmVlKHRoaXMuX29wLCB0cmVlLCB2YWx1ZXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFdmFsdWF0b3I7Il19",
    "map": {
      "version": 3,
      "sources": [
        "evaluator.js"
      ],
      "names": [
        "evaluateTree",
        "operators",
        "treeHead",
        "values",
        "isOperator",
        "ch",
        "Object",
        "keys",
        "includes",
        "v",
        "value",
        "children",
        "map",
        "t",
        "opfn",
        "fn",
        "Evaluator",
        "_op",
        "parser",
        "Parser",
        "exp",
        "parse",
        "tree"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,aAAT,CAAsBC,SAAtB,EAAiCC,QAAjC,EAA2CC,MAA3C,EAAmD;AAC/C,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,EAAE;AAAA,WAAIC,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,QAAvB,CAAgCH,EAAhC,CAAJ;AAAA,GAArB;;AACA,MAAII,CAAC,GAAGP,QAAQ,CAACQ,KAAjB;;AACA,MAAIN,UAAU,CAACK,CAAD,CAAd,EAAoB;AAChB,QAAIE,QAAQ,GAAGT,QAAQ,CAACS,QAAT,CAAkBC,GAAlB,CAAsB,UAAAC,CAAC;AAAA,aAAIb,aAAY,CAACC,SAAD,EAAYY,CAAZ,EAAeV,MAAf,CAAhB;AAAA,KAAvB,CAAf;AACA,QAAIW,IAAI,GAAGb,SAAS,CAACQ,CAAD,CAAT,CAAaM,EAAxB;AACA,WAAOD,IAAI,MAAJ,4BAAQH,QAAR,EAAP;AACH,GAJD,MAIO;AACH,WAAOR,MAAM,CAACM,CAAD,CAAb;AACH;AACJ;;AAAA;;IAEKO,S;AACF,qBAAYf,SAAZ,EAAuB;AAAA;;AACnB,SAAKgB,GAAL,GAAWhB,SAAX;AACA,SAAKiB,MAAL,GAAc,IAAIC,kBAAJ,CAAWlB,SAAX,CAAd;AACH;;;;6BACQmB,G,EAAKjB,M,EAAQ;AAClB,aAAO,KAAKH,YAAL,CAAkB,KAAKkB,MAAL,CAAYG,KAAZ,CAAkBD,GAAlB,CAAlB,EAA0CjB,MAA1C,CAAP;AACH;;;iCACYmB,I,EAAMnB,M,EAAQ;AACvB,aAAOH,aAAY,CAAC,KAAKiB,GAAN,EAAWK,IAAX,EAAiBnB,MAAjB,CAAnB;AACH;;;;;;eAGUa,S",
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "sourcesContent": [
        "import Parser from './parser';\r\n\r\nfunction evaluateTree(operators, treeHead, values) {\r\n    const isOperator = ch => Object.keys(operators).includes(ch);\r\n    let v = treeHead.value;\r\n    if( isOperator(v) ) {\r\n        let children = treeHead.children.map(t => evaluateTree(operators, t, values));\r\n        let opfn = operators[v].fn;\r\n        return opfn(...children);\r\n    } else {\r\n        return values[v];\r\n    }\r\n};\r\n\r\nclass Evaluator {\r\n    constructor(operators) {\r\n        this._op = operators;\r\n        this.parser = new Parser(operators);\r\n    }\r\n    evaluate(exp, values) {\r\n        return this.evaluateTree(this.parser.parse(exp), values);\r\n    }\r\n    evaluateTree(tree, values) {\r\n        return evaluateTree(this._op, tree, values);\r\n    }\r\n}\r\n\r\nexport default Evaluator;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591336284170
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"filename\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\parser.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\parser.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\parser.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\parser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
        "sourceFileName": "parser.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar stackify = function stackify(arr) {\n  arr = arr || [];\n\n  arr.peek = function () {\n    return arr[arr.length - 1];\n  };\n\n  return arr;\n};\n\nvar format = function format(tk) {\n  return typeof tk === 'string' ? {\n    value: tk,\n    children: []\n  } : tk;\n};\n\nvar makeTreeNode = function makeTreeNode(op, a, b) {\n  return {\n    value: op,\n    children: [a, b]\n  };\n}; // Break an expression into discrete tokens\n// for simpler preprocessing and parsing\n\n\nvar tokenize = function tokenize(operators, exp) {\n  var isOperator = function isOperator(chr) {\n    return Object.keys(operators).includes(chr);\n  };\n\n  var tokens = [];\n  var cur_token = '';\n\n  var push_token = function push_token() {\n    if (cur_token !== '') {\n      tokens.push({\n        value: cur_token,\n        type: 'identifier'\n      });\n      cur_token = '';\n    }\n  };\n\n  var _iterator = _createForOfIteratorHelper(exp),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _char = _step.value;\n\n      if (/[a-zA-Z1-9_]/.test(_char)) {\n        cur_token += _char;\n      } else if (/\\s/.test(_char)) {\n        push_token();\n      } else {\n        push_token();\n\n        if (isOperator(_char)) {\n          tokens.push({\n            value: _char,\n            type: 'operator'\n          });\n        } else tokens.push({\n          value: _char,\n          type: 'unknown'\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  push_token();\n  return tokens;\n};\n\nvar parseExpression = function parseExpression(operators, exp) {\n  var OPERATOR = operators;\n\n  var isBinaryOperator = function isBinaryOperator(chr) {\n    return Object.keys(OPERATOR).filter(function (op) {\n      return OPERATOR[op].binary;\n    }).includes(chr);\n  };\n\n  var isUnaryOperator = function isUnaryOperator(chr) {\n    return Object.keys(OPERATOR).filter(function (op) {\n      return !OPERATOR[op].binary;\n    }).includes(chr);\n  };\n\n  var operator_stack = stackify();\n  var operand_stack = stackify();\n  var unique_tokens = [];\n  var unaryOp = 0;\n\n  var aggregateUnaryOp = function aggregateUnaryOp() {\n    while (unaryOp > 0) {\n      var op = operator_stack.pop();\n      var operand = operand_stack.pop();\n      operand_stack.push({\n        value: op,\n        children: [format(operand)]\n      });\n      unaryOp--;\n    }\n  };\n\n  var tokens = tokenize(OPERATOR, exp);\n\n  var getToken = function getToken(idx) {\n    return idx >= 0 && idx < tokens.length ? tokens[idx] : null;\n  };\n\n  var assert = function assert(bool, msg) {\n    if (!bool) throw new Error(msg);\n  }; // check if expression is valid\n\n\n  var parenValid = 0;\n\n  for (var t = 0; t < tokens.length; t++) {\n    var token = tokens[t];\n\n    if (token.type === 'operator') {\n      if (isBinaryOperator(token.value)) {\n        var prevToken = getToken(t - 1);\n        assert(prevToken !== null, \"Binary operator must have a left-hand operand.\");\n        assert(prevToken.type === 'identifier' || prevToken.value === ')', \"Binary operator may not be directly preceded by an operator.\"); // either identifier or expression\n\n        var valid = false;\n        var tk = t + 1;\n\n        while (getToken(tk) !== null && !valid) {\n          if (isBinaryOperator(getToken(tk))) break;else if (getToken(tk).type === 'identifier' || getToken(tk).value === '(') valid = true;\n          tk++;\n        }\n\n        assert(valid, \"Binary operators may not be adjacent to one another.\");\n      } else {\n        var t2 = t + 1;\n        var operates = false;\n\n        while (!operates && getToken(t2) !== null) {\n          var cur = getToken(t2++);\n          operates = cur.type === 'identifier' || cur.value === '(';\n        }\n\n        assert(\"Unary operator must operate on an identifier or expression.\");\n      }\n    } else if (token.type === 'identifier') {\n      var prevCheckToken = t - 1;\n      var _valid = true;\n\n      while (_valid && getToken(prevCheckToken) !== null) {\n        var _tk = getToken(prevCheckToken--);\n\n        if (isBinaryOperator(_tk.value)) break;else if (_tk.type === 'identifier' || _tk.value === ')') _valid = false;\n      }\n\n      assert(_valid, \"Operands may not be placed adjacent to one another without an operator in between.\");\n    } else {\n      if (token.value === '(') {\n        parenValid++;\n      } else if (token.value === ')') {\n        assert(parenValid !== 0, \"Mismatched closing parenthesis.\");\n        parenValid--;\n      }\n    }\n  }\n\n  assert(parenValid === 0, \"Unclosed parenthesis in expression!\");\n  var grabbingExpression = false;\n  var expression = '';\n  var expParen = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(tokens),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _token = _step2.value;\n\n      // first check if grabbing expression\n      if (grabbingExpression) {\n        if (_token.value === '(') {\n          expParen++;\n          expression += '(';\n        } else if (_token.value === ')') {\n          expParen--;\n\n          if (expParen === 0) {\n            var _exp = parseExpression(operators, expression);\n\n            var exp_tk = _exp.tokens;\n\n            var _iterator3 = _createForOfIteratorHelper(exp_tk),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _tk2 = _step3.value;\n                if (!unique_tokens.includes(_tk2)) unique_tokens.push(_tk2);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            delete _exp.tokens; // remove extraneous data from internal tree nodes\n\n            operand_stack.push(_exp);\n            aggregateUnaryOp();\n            expression = '';\n            grabbingExpression = false;\n          } else {\n            expression += ')';\n          }\n        } else expression += _token.value;\n\n        continue;\n      }\n\n      if (_token.type === 'identifier') {\n        operand_stack.push(_token.value);\n        aggregateUnaryOp();\n        if (!unique_tokens.includes(_token.value)) unique_tokens.push(_token.value);\n      } else if (isBinaryOperator(_token.value)) {\n        if (operator_stack.length > 0 && OPERATOR[_token.value].precedence < OPERATOR[operator_stack.peek()].precedence) {\n          var operands = [operand_stack.pop()];\n          var _operators = [];\n          var prec = OPERATOR[operator_stack.peek()].precedence;\n\n          while (OPERATOR[operator_stack.peek()].precedence === prec) {\n            operands.push(operand_stack.pop());\n\n            _operators.push(operator_stack.pop());\n          }\n\n          while (_operators.length > 0) {\n            var _op = operands.pop();\n\n            var _op2 = operands.pop();\n\n            var new_operand = makeTreeNode(_operators.pop(), _op2, _op);\n            operands.push(new_operand);\n          }\n\n          operand_stack.push(operands[0]);\n        }\n\n        operator_stack.push(_token.value);\n      } else if (isUnaryOperator(_token.value)) {\n        unaryOp++;\n        operator_stack.push(_token.value);\n      } else if (_token.value === '(') {\n        grabbingExpression = true;\n        expParen++;\n      } else {\n        throw new Error(\"Unexpected character '\".concat(_token.value, \"'\"));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (grabbingExpression) {\n    throw new Error('Expression contains unmatched opening parenthesis.');\n  }\n\n  while (operator_stack.length > 0) {\n    var op2 = format(operand_stack.pop());\n    var op1 = format(operand_stack.pop());\n    var op = operator_stack.pop();\n    operand_stack.push(makeTreeNode(op, op1, op2));\n  }\n\n  if (operand_stack.length > 1) {\n    throw new Error('Too many operands!');\n  }\n\n  var retObj = format(operand_stack[0]);\n  retObj.tokens = unique_tokens;\n  return operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(operators) {\n    _classCallCheck(this, Parser);\n\n    this._op = operators;\n  }\n\n  _createClass(Parser, [{\n    key: \"parse\",\n    value: function parse(exp) {\n      return parseExpression(this._op, exp);\n    }\n  }]);\n\n  return Parser;\n}();\n\nvar _default = Parser;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "parser.js"
      ],
      "names": [
        "stackify",
        "arr",
        "peek",
        "length",
        "format",
        "tk",
        "value",
        "children",
        "makeTreeNode",
        "op",
        "a",
        "b",
        "tokenize",
        "operators",
        "exp",
        "isOperator",
        "chr",
        "Object",
        "keys",
        "includes",
        "tokens",
        "cur_token",
        "push_token",
        "push",
        "type",
        "char",
        "test",
        "parseExpression",
        "OPERATOR",
        "isBinaryOperator",
        "filter",
        "binary",
        "isUnaryOperator",
        "operator_stack",
        "operand_stack",
        "unique_tokens",
        "unaryOp",
        "aggregateUnaryOp",
        "pop",
        "operand",
        "getToken",
        "idx",
        "assert",
        "bool",
        "msg",
        "Error",
        "parenValid",
        "t",
        "token",
        "prevToken",
        "valid",
        "t2",
        "operates",
        "cur",
        "prevCheckToken",
        "grabbingExpression",
        "expression",
        "expParen",
        "exp_tk",
        "precedence",
        "operands",
        "prec",
        "op2",
        "op1",
        "new_operand",
        "retObj",
        "Parser",
        "_op"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "sourcesContent": [
        "const stackify = arr => {\r\n\tarr = arr || [];\r\n\tarr.peek = () => arr[arr.length-1];\r\n\treturn arr;\r\n};\r\n\r\nconst format = (tk) => typeof tk === 'string' ? { value: tk, children: [] } : tk;\r\n\r\nconst makeTreeNode = (op, a, b) => {\r\n\treturn {\r\n\t\tvalue: op,\r\n\t\tchildren: [a, b]\r\n\t}\r\n};\r\n\r\n// Break an expression into discrete tokens\r\n// for simpler preprocessing and parsing\r\nconst tokenize = (operators, exp) => {\r\n    const isOperator = chr => Object.keys(operators).includes(chr);\r\n\r\n\tlet tokens = [];\r\n\r\n\tlet cur_token = '';\r\n\tconst push_token = () => {\r\n\t\tif( cur_token !== '' ) {\r\n\t\t\ttokens.push({\r\n\t\t\t\tvalue: cur_token,\r\n\t\t\t\ttype: 'identifier'\r\n\t\t\t});\r\n\t\t\tcur_token = '';\r\n\t\t}\r\n\t};\r\n\r\n\tfor( let char of exp ) {\r\n\t\tif( /[a-zA-Z1-9_]/.test(char) ) {\r\n\t\t\tcur_token += char;\r\n\t\t} else if( /\\s/.test(char) ) {\r\n\t\t\tpush_token();\r\n\t\t} else {\r\n\t\t\tpush_token();\r\n\t\t\tif( isOperator(char) ) {\r\n\t\t\t\ttokens.push({\r\n\t\t\t\t\tvalue: char,\r\n\t\t\t\t\ttype: 'operator'\r\n\t\t\t\t});\r\n\t\t\t} else tokens.push({\r\n\t\t\t\tvalue: char,\r\n\t\t\t\ttype: 'unknown'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpush_token();\r\n\r\n\treturn tokens;\r\n};\r\n\r\nconst parseExpression = (operators, exp) => {\r\n    const OPERATOR = operators;\r\n    const isBinaryOperator = chr => Object.keys(OPERATOR).filter(op => OPERATOR[op].binary).includes(chr);\r\n    const isUnaryOperator = chr => Object.keys(OPERATOR).filter(op => !OPERATOR[op].binary).includes(chr);\r\n\r\n\tconst operator_stack = stackify();\r\n\tconst operand_stack = stackify();\r\n\r\n\tlet unique_tokens = [];\r\n\r\n\tlet unaryOp = 0;\r\n    const aggregateUnaryOp = () => {\r\n        while( unaryOp > 0 ) {\r\n            let op = operator_stack.pop();\r\n            let operand = operand_stack.pop();\r\n            operand_stack.push({\r\n                value: op,\r\n                children: [format(operand)]\r\n            });\r\n            unaryOp--;\r\n        }\r\n\t};\r\n    \r\n    let tokens = tokenize(OPERATOR, exp);\r\n\r\n\tlet getToken = idx => (idx >= 0 && idx < tokens.length) ? tokens[idx] : null;\r\n\tlet assert = (bool, msg) => {\r\n\t\tif( !bool ) throw new Error(msg);\r\n\t};\r\n\r\n\t// check if expression is valid\r\n\tlet parenValid = 0;\r\n\tfor( let t = 0; t < tokens.length; t++ ) {\r\n\t\tlet token = tokens[t];\r\n\t\tif( token.type === 'operator' ) {\r\n\t\t\tif( isBinaryOperator(token.value) ) {\r\n\t\t\t\tlet prevToken = getToken(t-1);\r\n\t\t\t\tassert(prevToken !== null, \"Binary operator must have a left-hand operand.\");\r\n\t\t\t\tassert(prevToken.type === 'identifier' || prevToken.value === ')', \"Binary operator may not be directly preceded by an operator.\"); // either identifier or expression\r\n\r\n\t\t\t\tlet valid = false;\r\n\t\t\t\tlet tk = t+1;\r\n\t\t\t\twhile( getToken(tk) !== null && !valid ) {\r\n\t\t\t\t\tif( isBinaryOperator(getToken(tk)) ) break;\r\n\t\t\t\t\telse if( getToken(tk).type === 'identifier' || getToken(tk).value === '(' ) valid = true;\r\n\t\t\t\t\ttk++;\r\n\t\t\t\t}\r\n\t\t\t\tassert(valid, \"Binary operators may not be adjacent to one another.\");\r\n\t\t\t} else {\r\n\t\t\t\tlet t2 = t+1;\r\n\t\t\t\tlet operates = false;\r\n\t\t\t\twhile( !operates && getToken(t2) !== null ) {\r\n\t\t\t\t\tlet cur = getToken(t2++);\r\n\t\t\t\t\toperates = cur.type === 'identifier' || cur.value === '(';\r\n\t\t\t\t}\r\n\t\t\t\tassert(\"Unary operator must operate on an identifier or expression.\");\r\n\t\t\t}\r\n\t\t} else if( token.type === 'identifier' ) {\r\n\t\t\tlet prevCheckToken = t-1;\r\n\t\t\tlet valid = true;\r\n\t\t\twhile( valid && getToken(prevCheckToken) !== null ) {\r\n\t\t\t\tlet tk = getToken(prevCheckToken--);\r\n\t\t\t\tif( isBinaryOperator(tk.value) ) break;\r\n\t\t\t\telse if( tk.type === 'identifier' || tk.value === ')' ) valid = false;\r\n\t\t\t}\r\n\t\t\tassert(valid, \"Operands may not be placed adjacent to one another without an operator in between.\");\r\n\t\t} else {\r\n\t\t\tif( token.value === '(' ) {\r\n\t\t\t\tparenValid++;\r\n\t\t\t} else if( token.value === ')' ) {\r\n\t\t\t\tassert(parenValid !== 0, \"Mismatched closing parenthesis.\");\r\n\t\t\t\tparenValid--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tassert(parenValid === 0, \"Unclosed parenthesis in expression!\");\r\n\r\n\tlet grabbingExpression = false;\r\n\tlet expression = '';\r\n\tlet expParen = 0;\r\n\tfor( let token of tokens ) {\r\n\t\t// first check if grabbing expression\r\n\t\tif( grabbingExpression ) {\r\n\t\t\tif( token.value === '(' ) {\r\n\t\t\t\texpParen++;\r\n\t\t\t\texpression += '(';\r\n\t\t\t} else if( token.value === ')' ) {\r\n\t\t\t\texpParen--;\r\n\t\t\t\tif( expParen === 0 ) {\r\n\t\t\t\t\tlet exp = parseExpression(operators, expression);\r\n                    let exp_tk = exp.tokens;\r\n                    for( let tk of exp_tk ) {\r\n                        if( !unique_tokens.includes(tk) ) unique_tokens.push(tk);\r\n                    }\r\n                    delete exp.tokens; // remove extraneous data from internal tree nodes\r\n                    operand_stack.push(exp);\r\n                    aggregateUnaryOp();\r\n\t\t\t\t\texpression = '';\r\n\t\t\t\t\tgrabbingExpression = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\texpression += ')';\r\n\t\t\t\t}\r\n\t\t\t} else expression += token.value;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\tif( token.type === 'identifier' ) {\r\n\t\t\toperand_stack.push(token.value);\r\n\t\t\taggregateUnaryOp();\r\n\t\t\tif( !unique_tokens.includes(token.value) ) unique_tokens.push(token.value);\r\n\t\t} else if( isBinaryOperator(token.value) ) {\r\n\t\t\tif( operator_stack.length > 0 && OPERATOR[token.value].precedence < OPERATOR[operator_stack.peek()].precedence ) {\r\n\t\t\t\tconst operands = [operand_stack.pop()];\r\n\t\t\t\tconst operators = [];\r\n\t\t\t\tlet prec = OPERATOR[operator_stack.peek()].precedence;\r\n\t\t\t\twhile( OPERATOR[operator_stack.peek()].precedence === prec ) {\r\n\t\t\t\t\toperands.push(operand_stack.pop());\r\n\t\t\t\t\toperators.push(operator_stack.pop());\r\n\t\t\t\t}\r\n\t\t\t\twhile(operators.length > 0) {\r\n                    let op2 = operands.pop();\r\n                    let op1 = operands.pop();\r\n\t\t\t\t\tlet new_operand = makeTreeNode(operators.pop(), op1, op2);\r\n\t\t\t\t\toperands.push(new_operand);\r\n\t\t\t\t}\r\n\t\t\t\toperand_stack.push(operands[0]);\r\n\t\t\t}\r\n\t\t\toperator_stack.push(token.value);\r\n\t\t} else if( isUnaryOperator(token.value) ) {\r\n\t\t\tunaryOp++;\r\n\t\t\toperator_stack.push(token.value);\r\n\t\t} else if( token.value === '(' ) {\r\n\t\t\tgrabbingExpression = true;\r\n\t\t\texpParen++;\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Unexpected character '${token.value}'`);\r\n\t\t}\r\n\t}\r\n\r\n\tif( grabbingExpression ) {\r\n\t\tthrow new Error('Expression contains unmatched opening parenthesis.');\r\n\t}\r\n\r\n\twhile(operator_stack.length > 0) {\r\n\t\tlet op2 = format(operand_stack.pop());\r\n\t\tlet op1 = format(operand_stack.pop());\r\n        let op = operator_stack.pop();\r\n\r\n\t\toperand_stack.push(makeTreeNode(op, op1, op2));\r\n\t}\r\n\tif( operand_stack.length > 1 ) {\r\n\t\tthrow new Error('Too many operands!');\r\n    }\r\n\r\n    let retObj = format(operand_stack[0]);\r\n\tretObj.tokens = unique_tokens;\r\n\r\n\treturn operand_stack[0]; // should be the expression tree (or a single-token string)\r\n};\r\n\r\nclass Parser {\r\n    constructor(operators) {\r\n        this._op = operators;\r\n    }\r\n    parse(exp) {\r\n        return parseExpression(this._op, exp);\r\n    }\r\n}\r\n\r\nexport default Parser;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591336256480
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"filename\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\\\\test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\quant\\\\Desktop\\\\vsc\\\\expressions\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\quant\\Desktop\\vsc\\expressions",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\test.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _arithexp = _interopRequireDefault(require(\"./arithexp\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar expression = \"( 2 + 3 - 1 ) / ( 5 - 2 )\";\nconsole.log(\"Expression to parse: \" + expression);\nvar exp = new _arithexp[\"default\"](expression); // TEMPORARY: Only until numbers are implemented in the parser directly.\n\nvar numbers = {};\n\nvar _iterator = _createForOfIteratorHelper(exp.getTokens()),\n    _step;\n\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var number = _step.value;\n    numbers[number] = parseInt(number);\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nconsole.log(\"Evaluated: \" + exp.evaluate(numbers));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiZXhwcmVzc2lvbiIsImNvbnNvbGUiLCJsb2ciLCJleHAiLCJBcml0aG1ldGljRXhwcmVzc2lvbiIsIm51bWJlcnMiLCJnZXRUb2tlbnMiLCJudW1iZXIiLCJwYXJzZUludCIsImV2YWx1YXRlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHLDJCQUFuQjtBQUVBQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSwwQkFBMEJGLFVBQXRDO0FBRUEsSUFBSUcsR0FBRyxHQUFHLElBQUlDLG9CQUFKLENBQXlCSixVQUF6QixDQUFWLEMsQ0FFQTs7QUFDQSxJQUFJSyxPQUFPLEdBQUcsRUFBZDs7MkNBQ21CRixHQUFHLENBQUNHLFNBQUosRTs7OztBQUFuQixzREFBcUM7QUFBQSxRQUE1QkMsTUFBNEI7QUFDakNGLElBQUFBLE9BQU8sQ0FBQ0UsTUFBRCxDQUFQLEdBQWtCQyxRQUFRLENBQUNELE1BQUQsQ0FBMUI7QUFDSDs7Ozs7OztBQUVETixPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBZ0JDLEdBQUcsQ0FBQ00sUUFBSixDQUFhSixPQUFiLENBQTVCIiwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xccXVhbnRcXERlc2t0b3BcXHZzY1xcZXhwcmVzc2lvbnNcXCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcml0aG1ldGljRXhwcmVzc2lvbiBmcm9tICcuL2FyaXRoZXhwJztcclxuXHJcbmNvbnN0IGV4cHJlc3Npb24gPSBcIiggMiArIDMgLSAxICkgLyAoIDUgLSAyIClcIjtcclxuXHJcbmNvbnNvbGUubG9nKFwiRXhwcmVzc2lvbiB0byBwYXJzZTogXCIgKyBleHByZXNzaW9uKTtcclxuXHJcbnZhciBleHAgPSBuZXcgQXJpdGhtZXRpY0V4cHJlc3Npb24oZXhwcmVzc2lvbik7XHJcblxyXG4vLyBURU1QT1JBUlk6IE9ubHkgdW50aWwgbnVtYmVycyBhcmUgaW1wbGVtZW50ZWQgaW4gdGhlIHBhcnNlciBkaXJlY3RseS5cclxubGV0IG51bWJlcnMgPSB7fTtcclxuZm9yKCBsZXQgbnVtYmVyIG9mIGV4cC5nZXRUb2tlbnMoKSApIHtcclxuICAgIG51bWJlcnNbbnVtYmVyXSA9IHBhcnNlSW50KG51bWJlcik7XHJcbn1cclxuXHJcbmNvbnNvbGUubG9nKFwiRXZhbHVhdGVkOiBcIiArIGV4cC5ldmFsdWF0ZShudW1iZXJzKSk7Il19",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "expression",
        "console",
        "log",
        "exp",
        "ArithmeticExpression",
        "numbers",
        "getTokens",
        "number",
        "parseInt",
        "evaluate"
      ],
      "mappings": ";;AAAA;;;;;;;;;;AAEA,IAAMA,UAAU,GAAG,2BAAnB;AAEAC,OAAO,CAACC,GAAR,CAAY,0BAA0BF,UAAtC;AAEA,IAAIG,GAAG,GAAG,IAAIC,oBAAJ,CAAyBJ,UAAzB,CAAV,C,CAEA;;AACA,IAAIK,OAAO,GAAG,EAAd;;2CACmBF,GAAG,CAACG,SAAJ,E;;;;AAAnB,sDAAqC;AAAA,QAA5BC,MAA4B;AACjCF,IAAAA,OAAO,CAACE,MAAD,CAAP,GAAkBC,QAAQ,CAACD,MAAD,CAA1B;AACH;;;;;;;AAEDN,OAAO,CAACC,GAAR,CAAY,gBAAgBC,GAAG,CAACM,QAAJ,CAAaJ,OAAb,CAA5B",
      "sourceRoot": "C:\\Users\\quant\\Desktop\\vsc\\expressions\\",
      "sourcesContent": [
        "import ArithmeticExpression from './arithexp';\r\n\r\nconst expression = \"( 2 + 3 - 1 ) / ( 5 - 2 )\";\r\n\r\nconsole.log(\"Expression to parse: \" + expression);\r\n\r\nvar exp = new ArithmeticExpression(expression);\r\n\r\n// TEMPORARY: Only until numbers are implemented in the parser directly.\r\nlet numbers = {};\r\nfor( let number of exp.getTokens() ) {\r\n    numbers[number] = parseInt(number);\r\n}\r\n\r\nconsole.log(\"Evaluated: \" + exp.evaluate(numbers));"
      ]
    },
    "sourceType": "script",
    "mtime": 1591336377896
  }
}