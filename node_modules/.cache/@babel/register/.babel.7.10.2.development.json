{
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/arithexp.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/arithexp.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/arithexp.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/arithexp.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "arithexp.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _evaluator = _interopRequireDefault(require(\"./evaluator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar OPERATOR = {\n  // operator precedence\n  '^': {\n    precedence: 3,\n    binary: true,\n    fn: function fn(a, b) {\n      return Math.pow(a, b);\n    }\n  },\n  '*': {\n    precedence: 2,\n    binary: true,\n    fn: function fn(a, b) {\n      return a * b;\n    }\n  },\n  '+': {\n    precedence: 1,\n    binary: true,\n    fn: function fn(a, b) {\n      return a + b;\n    }\n  },\n  '/': {\n    precedence: 2,\n    binary: true,\n    fn: function fn(a, b) {\n      return a / b;\n    }\n  },\n  '-': {\n    precedence: 1,\n    binary: true,\n    unary: true,\n    fn: function fn(a, b) {\n      return a - b;\n    },\n    ufn: function ufn(a) {\n      return -a;\n    }\n  }\n};\nvar ARITHMETIC_EVALUATOR = new _evaluator[\"default\"](OPERATOR);\n\nvar Expression = /*#__PURE__*/function () {\n  function Expression(exp) {\n    _classCallCheck(this, Expression);\n\n    if (typeof exp !== 'string') {\n      throw new Error(\"Expression constructor takes in an arithmetic expression.\");\n    }\n\n    this.tree = ARITHMETIC_EVALUATOR.parser.parse(exp);\n\n    var _iterator = _createForOfIteratorHelper(this.tree.tokens),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var token = _step.value;\n\n        if (token.length > 1) {\n          throw new Error(\"Variables may not be longer than one character long!\");\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(Expression, [{\n    key: \"getTokens\",\n    value: function getTokens() {\n      return this.tree.tokens;\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate() {\n      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _iterator2 = _createForOfIteratorHelper(this.tree.tokens),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var token = _step2.value;\n          if (!values.hasOwnProperty(token)) throw new Error(\"values must define a numeric value for every variable.\");\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return ARITHMETIC_EVALUATOR.evaluateTree(this.tree, values);\n    }\n  }]);\n\n  return Expression;\n}();\n\nvar _default = Expression;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyaXRoZXhwLmpzIl0sIm5hbWVzIjpbIk9QRVJBVE9SIiwicHJlY2VkZW5jZSIsImJpbmFyeSIsImZuIiwiYSIsImIiLCJNYXRoIiwicG93IiwidW5hcnkiLCJ1Zm4iLCJBUklUSE1FVElDX0VWQUxVQVRPUiIsIkV2YWx1YXRvciIsIkV4cHJlc3Npb24iLCJleHAiLCJFcnJvciIsInRyZWUiLCJwYXJzZXIiLCJwYXJzZSIsInRva2VucyIsInRva2VuIiwibGVuZ3RoIiwidmFsdWVzIiwiaGFzT3duUHJvcGVydHkiLCJldmFsdWF0ZVRyZWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFFBQVEsR0FBRztBQUNiO0FBQ0EsT0FBSztBQUNEQyxJQUFBQSxVQUFVLEVBQUUsQ0FEWDtBQUVEQyxJQUFBQSxNQUFNLEVBQUUsSUFGUDtBQUdEQyxJQUFBQSxFQUFFLEVBQUUsWUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsYUFBVUMsSUFBSSxDQUFDQyxHQUFMLENBQVNILENBQVQsRUFBWUMsQ0FBWixDQUFWO0FBQUE7QUFISCxHQUZRO0FBT2hCLE9BQUs7QUFDRUosSUFBQUEsVUFBVSxFQUFFLENBRGQ7QUFFRUMsSUFBQUEsTUFBTSxFQUFFLElBRlY7QUFHSkMsSUFBQUEsRUFBRSxFQUFFLFlBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGFBQVVELENBQUMsR0FBR0MsQ0FBZDtBQUFBO0FBSEEsR0FQVztBQVloQixPQUFLO0FBQ0VKLElBQUFBLFVBQVUsRUFBRSxDQURkO0FBRUVDLElBQUFBLE1BQU0sRUFBRSxJQUZWO0FBR0pDLElBQUFBLEVBQUUsRUFBRSxZQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxhQUFVRCxDQUFDLEdBQUdDLENBQWQ7QUFBQTtBQUhBLEdBWlc7QUFpQmIsT0FBSztBQUNESixJQUFBQSxVQUFVLEVBQUUsQ0FEWDtBQUVEQyxJQUFBQSxNQUFNLEVBQUUsSUFGUDtBQUdEQyxJQUFBQSxFQUFFLEVBQUUsWUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsYUFBVUQsQ0FBQyxHQUFHQyxDQUFkO0FBQUE7QUFISCxHQWpCUTtBQXNCYixPQUFLO0FBQ0RKLElBQUFBLFVBQVUsRUFBRSxDQURYO0FBRURDLElBQUFBLE1BQU0sRUFBRSxJQUZQO0FBR0RNLElBQUFBLEtBQUssRUFBRSxJQUhOO0FBSURMLElBQUFBLEVBQUUsRUFBRSxZQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxhQUFVRCxDQUFDLEdBQUdDLENBQWQ7QUFBQSxLQUpIO0FBS0RJLElBQUFBLEdBQUcsRUFBRSxhQUFDTCxDQUFEO0FBQUEsYUFBTyxDQUFDQSxDQUFSO0FBQUE7QUFMSjtBQXRCUSxDQUFqQjtBQStCQSxJQUFNTSxvQkFBb0IsR0FBRyxJQUFJQyxxQkFBSixDQUFjWCxRQUFkLENBQTdCOztJQUVNWSxVO0FBQ0Ysc0JBQVlDLEdBQVosRUFBaUI7QUFBQTs7QUFDYixRQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE4QjtBQUMxQixZQUFNLElBQUlDLEtBQUosQ0FBVSwyREFBVixDQUFOO0FBQ0g7O0FBQ0QsU0FBS0MsSUFBTCxHQUFZTCxvQkFBb0IsQ0FBQ00sTUFBckIsQ0FBNEJDLEtBQTVCLENBQWtDSixHQUFsQyxDQUFaOztBQUphLCtDQUtLLEtBQUtFLElBQUwsQ0FBVUcsTUFMZjtBQUFBOztBQUFBO0FBS2IsMERBQXFDO0FBQUEsWUFBNUJDLEtBQTRCOztBQUNqQyxZQUFJQSxLQUFLLENBQUNDLE1BQU4sR0FBZSxDQUFuQixFQUF1QjtBQUNuQixnQkFBTSxJQUFJTixLQUFKLENBQVUsc0RBQVYsQ0FBTjtBQUNIO0FBQ0o7QUFUWTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBVWhCOzs7O2dDQUNXO0FBQ1IsYUFBTyxLQUFLQyxJQUFMLENBQVVHLE1BQWpCO0FBQ0g7OzsrQkFDcUI7QUFBQSxVQUFiRyxNQUFhLHVFQUFKLEVBQUk7O0FBQUEsa0RBQ0EsS0FBS04sSUFBTCxDQUFVRyxNQURWO0FBQUE7O0FBQUE7QUFDbEIsK0RBQXFDO0FBQUEsY0FBNUJDLEtBQTRCO0FBQ2pDLGNBQUksQ0FBQ0UsTUFBTSxDQUFDQyxjQUFQLENBQXNCSCxLQUF0QixDQUFMLEVBQW9DLE1BQU0sSUFBSUwsS0FBSixDQUFVLHdEQUFWLENBQU47QUFDdkM7QUFIaUI7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFJbEIsYUFBT0osb0JBQW9CLENBQUNhLFlBQXJCLENBQWtDLEtBQUtSLElBQXZDLEVBQTZDTSxNQUE3QyxDQUFQO0FBQ0g7Ozs7OztlQUdVVCxVIiwic291cmNlUm9vdCI6Ii9ob21lL2lzYWFjL1BlcnNvbmFsL3BhcnNlcnMvIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQXJpdGhtZXRpYyBFeHByZXNzaW9ucyBQYXJzZXIvRXZhbHVhdG9yXG5cbmltcG9ydCBFdmFsdWF0b3IgZnJvbSAnLi9ldmFsdWF0b3InO1xuXG5jb25zdCBPUEVSQVRPUiA9IHtcbiAgICAvLyBvcGVyYXRvciBwcmVjZWRlbmNlXG4gICAgJ14nOiB7XG4gICAgICAgIHByZWNlZGVuY2U6IDMsXG4gICAgICAgIGJpbmFyeTogdHJ1ZSxcbiAgICAgICAgZm46IChhLCBiKSA9PiBNYXRoLnBvdyhhLCBiKVxuICAgIH0sXG5cdCcqJzoge1xuICAgICAgICBwcmVjZWRlbmNlOiAyLFxuICAgICAgICBiaW5hcnk6IHRydWUsXG5cdFx0Zm46IChhLCBiKSA9PiBhICogYlxuXHR9LFxuXHQnKyc6IHtcbiAgICAgICAgcHJlY2VkZW5jZTogMSxcbiAgICAgICAgYmluYXJ5OiB0cnVlLFxuXHRcdGZuOiAoYSwgYikgPT4gYSArIGJcbiAgICB9LFxuICAgICcvJzoge1xuICAgICAgICBwcmVjZWRlbmNlOiAyLFxuICAgICAgICBiaW5hcnk6IHRydWUsXG4gICAgICAgIGZuOiAoYSwgYikgPT4gYSAvIGJcbiAgICB9LFxuICAgICctJzoge1xuICAgICAgICBwcmVjZWRlbmNlOiAxLFxuICAgICAgICBiaW5hcnk6IHRydWUsXG4gICAgICAgIHVuYXJ5OiB0cnVlLFxuICAgICAgICBmbjogKGEsIGIpID0+IGEgLSBiLFxuICAgICAgICB1Zm46IChhKSA9PiAtYVxuICAgIH1cbn07XG5cbmNvbnN0IEFSSVRITUVUSUNfRVZBTFVBVE9SID0gbmV3IEV2YWx1YXRvcihPUEVSQVRPUik7XG5cbmNsYXNzIEV4cHJlc3Npb24ge1xuICAgIGNvbnN0cnVjdG9yKGV4cCkge1xuICAgICAgICBpZiggdHlwZW9mIGV4cCAhPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHByZXNzaW9uIGNvbnN0cnVjdG9yIHRha2VzIGluIGFuIGFyaXRobWV0aWMgZXhwcmVzc2lvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmVlID0gQVJJVEhNRVRJQ19FVkFMVUFUT1IucGFyc2VyLnBhcnNlKGV4cCk7XG4gICAgICAgIGZvciggbGV0IHRva2VuIG9mIHRoaXMudHJlZS50b2tlbnMgKSB7XG4gICAgICAgICAgICBpZiggdG9rZW4ubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYXJpYWJsZXMgbWF5IG5vdCBiZSBsb25nZXIgdGhhbiBvbmUgY2hhcmFjdGVyIGxvbmchXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldFRva2VucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlZS50b2tlbnM7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcyA9IHt9KSB7XG4gICAgICAgIGZvciggbGV0IHRva2VuIG9mIHRoaXMudHJlZS50b2tlbnMgKSB7XG4gICAgICAgICAgICBpZiggIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh0b2tlbikgKSB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZXMgbXVzdCBkZWZpbmUgYSBudW1lcmljIHZhbHVlIGZvciBldmVyeSB2YXJpYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFSSVRITUVUSUNfRVZBTFVBVE9SLmV2YWx1YXRlVHJlZSh0aGlzLnRyZWUsIHZhbHVlcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHByZXNzaW9uOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "arithexp.js"
      ],
      "names": [
        "OPERATOR",
        "precedence",
        "binary",
        "fn",
        "a",
        "b",
        "Math",
        "pow",
        "unary",
        "ufn",
        "ARITHMETIC_EVALUATOR",
        "Evaluator",
        "Expression",
        "exp",
        "Error",
        "tree",
        "parser",
        "parse",
        "tokens",
        "token",
        "length",
        "values",
        "hasOwnProperty",
        "evaluateTree"
      ],
      "mappings": ";;;;;;;AAEA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG;AACb;AACA,OAAK;AACDC,IAAAA,UAAU,EAAE,CADX;AAEDC,IAAAA,MAAM,EAAE,IAFP;AAGDC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUC,IAAI,CAACC,GAAL,CAASH,CAAT,EAAYC,CAAZ,CAAV;AAAA;AAHH,GAFQ;AAOhB,OAAK;AACEJ,IAAAA,UAAU,EAAE,CADd;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGJC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHA,GAPW;AAYhB,OAAK;AACEJ,IAAAA,UAAU,EAAE,CADd;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGJC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHA,GAZW;AAiBb,OAAK;AACDJ,IAAAA,UAAU,EAAE,CADX;AAEDC,IAAAA,MAAM,EAAE,IAFP;AAGDC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA;AAHH,GAjBQ;AAsBb,OAAK;AACDJ,IAAAA,UAAU,EAAE,CADX;AAEDC,IAAAA,MAAM,EAAE,IAFP;AAGDM,IAAAA,KAAK,EAAE,IAHN;AAIDL,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,GAAGC,CAAd;AAAA,KAJH;AAKDI,IAAAA,GAAG,EAAE,aAACL,CAAD;AAAA,aAAO,CAACA,CAAR;AAAA;AALJ;AAtBQ,CAAjB;AA+BA,IAAMM,oBAAoB,GAAG,IAAIC,qBAAJ,CAAcX,QAAd,CAA7B;;IAEMY,U;AACF,sBAAYC,GAAZ,EAAiB;AAAA;;AACb,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA8B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH;;AACD,SAAKC,IAAL,GAAYL,oBAAoB,CAACM,MAArB,CAA4BC,KAA5B,CAAkCJ,GAAlC,CAAZ;;AAJa,+CAKK,KAAKE,IAAL,CAAUG,MALf;AAAA;;AAAA;AAKb,0DAAqC;AAAA,YAA5BC,KAA4B;;AACjC,YAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAuB;AACnB,gBAAM,IAAIN,KAAJ,CAAU,sDAAV,CAAN;AACH;AACJ;AATY;AAAA;AAAA;AAAA;AAAA;AAUhB;;;;gCACW;AACR,aAAO,KAAKC,IAAL,CAAUG,MAAjB;AACH;;;+BACqB;AAAA,UAAbG,MAAa,uEAAJ,EAAI;;AAAA,kDACA,KAAKN,IAAL,CAAUG,MADV;AAAA;;AAAA;AAClB,+DAAqC;AAAA,cAA5BC,KAA4B;AACjC,cAAI,CAACE,MAAM,CAACC,cAAP,CAAsBH,KAAtB,CAAL,EAAoC,MAAM,IAAIL,KAAJ,CAAU,wDAAV,CAAN;AACvC;AAHiB;AAAA;AAAA;AAAA;AAAA;;AAIlB,aAAOJ,oBAAoB,CAACa,YAArB,CAAkC,KAAKR,IAAvC,EAA6CM,MAA7C,CAAP;AACH;;;;;;eAGUT,U",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "// Arithmetic Expressions Parser/Evaluator\n\nimport Evaluator from './evaluator';\n\nconst OPERATOR = {\n    // operator precedence\n    '^': {\n        precedence: 3,\n        binary: true,\n        fn: (a, b) => Math.pow(a, b)\n    },\n\t'*': {\n        precedence: 2,\n        binary: true,\n\t\tfn: (a, b) => a * b\n\t},\n\t'+': {\n        precedence: 1,\n        binary: true,\n\t\tfn: (a, b) => a + b\n    },\n    '/': {\n        precedence: 2,\n        binary: true,\n        fn: (a, b) => a / b\n    },\n    '-': {\n        precedence: 1,\n        binary: true,\n        unary: true,\n        fn: (a, b) => a - b,\n        ufn: (a) => -a\n    }\n};\n\nconst ARITHMETIC_EVALUATOR = new Evaluator(OPERATOR);\n\nclass Expression {\n    constructor(exp) {\n        if( typeof exp !== 'string' ) {\n            throw new Error(\"Expression constructor takes in an arithmetic expression.\");\n        }\n        this.tree = ARITHMETIC_EVALUATOR.parser.parse(exp);\n        for( let token of this.tree.tokens ) {\n            if( token.length > 1 ) {\n                throw new Error(\"Variables may not be longer than one character long!\");\n            }\n        }\n    }\n    getTokens() {\n        return this.tree.tokens;\n    }\n    evaluate(values = {}) {\n        for( let token of this.tree.tokens ) {\n            if( !values.hasOwnProperty(token) ) throw new Error(\"values must define a numeric value for every variable.\");\n        }\n        return ARITHMETIC_EVALUATOR.evaluateTree(this.tree, values);\n    }\n}\n\nexport default Expression;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591407750031
  },
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/evaluator.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/evaluator.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/evaluator.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/evaluator.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "evaluator.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _parser = _interopRequireDefault(require(\"./parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _evaluateTree(operators, treeHead, values) {\n  var isOperator = function isOperator(ch) {\n    return Object.keys(operators).includes(ch);\n  };\n\n  var v = treeHead.value;\n\n  if (isOperator(v)) {\n    var children = treeHead.children.map(function (t) {\n      return _evaluateTree(operators, t, values);\n    });\n    var opfn = children.length == 2 ? operators[v].fn : operators[v].ufn;\n    return opfn.apply(void 0, _toConsumableArray(children));\n  } else {\n    if (typeof v === 'string') return values[v];else return v;\n  }\n}\n\n;\n\nvar Evaluator = /*#__PURE__*/function () {\n  function Evaluator(operators) {\n    _classCallCheck(this, Evaluator);\n\n    this._op = operators;\n    this.parser = new _parser[\"default\"](operators);\n  }\n\n  _createClass(Evaluator, [{\n    key: \"evaluate\",\n    value: function evaluate(exp, values) {\n      return this.evaluateTree(this.parser.parse(exp), values);\n    }\n  }, {\n    key: \"evaluateTree\",\n    value: function evaluateTree(tree, values) {\n      return _evaluateTree(this._op, tree, values);\n    }\n  }]);\n\n  return Evaluator;\n}();\n\nvar _default = Evaluator;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2YWx1YXRvci5qcyJdLCJuYW1lcyI6WyJldmFsdWF0ZVRyZWUiLCJvcGVyYXRvcnMiLCJ0cmVlSGVhZCIsInZhbHVlcyIsImlzT3BlcmF0b3IiLCJjaCIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsInYiLCJ2YWx1ZSIsImNoaWxkcmVuIiwibWFwIiwidCIsIm9wZm4iLCJsZW5ndGgiLCJmbiIsInVmbiIsIkV2YWx1YXRvciIsIl9vcCIsInBhcnNlciIsIlBhcnNlciIsImV4cCIsInBhcnNlIiwidHJlZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsU0FBU0EsYUFBVCxDQUFzQkMsU0FBdEIsRUFBaUNDLFFBQWpDLEVBQTJDQyxNQUEzQyxFQUFtRDtBQUMvQyxNQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBQyxFQUFFO0FBQUEsV0FBSUMsTUFBTSxDQUFDQyxJQUFQLENBQVlOLFNBQVosRUFBdUJPLFFBQXZCLENBQWdDSCxFQUFoQyxDQUFKO0FBQUEsR0FBckI7O0FBQ0EsTUFBSUksQ0FBQyxHQUFHUCxRQUFRLENBQUNRLEtBQWpCOztBQUNBLE1BQUlOLFVBQVUsQ0FBQ0ssQ0FBRCxDQUFkLEVBQW9CO0FBQ2hCLFFBQUlFLFFBQVEsR0FBR1QsUUFBUSxDQUFDUyxRQUFULENBQWtCQyxHQUFsQixDQUFzQixVQUFBQyxDQUFDO0FBQUEsYUFBSWIsYUFBWSxDQUFDQyxTQUFELEVBQVlZLENBQVosRUFBZVYsTUFBZixDQUFoQjtBQUFBLEtBQXZCLENBQWY7QUFDQSxRQUFJVyxJQUFJLEdBQUdILFFBQVEsQ0FBQ0ksTUFBVCxJQUFtQixDQUFuQixHQUF1QmQsU0FBUyxDQUFDUSxDQUFELENBQVQsQ0FBYU8sRUFBcEMsR0FBeUNmLFNBQVMsQ0FBQ1EsQ0FBRCxDQUFULENBQWFRLEdBQWpFO0FBRUEsV0FBT0gsSUFBSSxNQUFKLDRCQUFRSCxRQUFSLEVBQVA7QUFDSCxHQUxELE1BS087QUFDSCxRQUFJLE9BQU9GLENBQVAsS0FBYSxRQUFqQixFQUE0QixPQUFPTixNQUFNLENBQUNNLENBQUQsQ0FBYixDQUE1QixLQUNLLE9BQU9BLENBQVA7QUFDUjtBQUNKOztBQUFBOztJQUVLUyxTO0FBQ0YscUJBQVlqQixTQUFaLEVBQXVCO0FBQUE7O0FBQ25CLFNBQUtrQixHQUFMLEdBQVdsQixTQUFYO0FBQ0EsU0FBS21CLE1BQUwsR0FBYyxJQUFJQyxrQkFBSixDQUFXcEIsU0FBWCxDQUFkO0FBQ0g7Ozs7NkJBQ1FxQixHLEVBQUtuQixNLEVBQVE7QUFDbEIsYUFBTyxLQUFLSCxZQUFMLENBQWtCLEtBQUtvQixNQUFMLENBQVlHLEtBQVosQ0FBa0JELEdBQWxCLENBQWxCLEVBQTBDbkIsTUFBMUMsQ0FBUDtBQUNIOzs7aUNBQ1lxQixJLEVBQU1yQixNLEVBQVE7QUFDdkIsYUFBT0gsYUFBWSxDQUFDLEtBQUttQixHQUFOLEVBQVdLLElBQVgsRUFBaUJyQixNQUFqQixDQUFuQjtBQUNIOzs7Ozs7ZUFHVWUsUyIsInNvdXJjZVJvb3QiOiIvaG9tZS9pc2FhYy9QZXJzb25hbC9wYXJzZXJzLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXJzZXIgZnJvbSAnLi9wYXJzZXInO1xuXG5mdW5jdGlvbiBldmFsdWF0ZVRyZWUob3BlcmF0b3JzLCB0cmVlSGVhZCwgdmFsdWVzKSB7XG4gICAgY29uc3QgaXNPcGVyYXRvciA9IGNoID0+IE9iamVjdC5rZXlzKG9wZXJhdG9ycykuaW5jbHVkZXMoY2gpO1xuICAgIGxldCB2ID0gdHJlZUhlYWQudmFsdWU7XG4gICAgaWYoIGlzT3BlcmF0b3IodikgKSB7XG4gICAgICAgIGxldCBjaGlsZHJlbiA9IHRyZWVIZWFkLmNoaWxkcmVuLm1hcCh0ID0+IGV2YWx1YXRlVHJlZShvcGVyYXRvcnMsIHQsIHZhbHVlcykpO1xuICAgICAgICBsZXQgb3BmbiA9IGNoaWxkcmVuLmxlbmd0aCA9PSAyID8gb3BlcmF0b3JzW3ZdLmZuIDogb3BlcmF0b3JzW3ZdLnVmbjtcblxuICAgICAgICByZXR1cm4gb3BmbiguLi5jaGlsZHJlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYoIHR5cGVvZiB2ID09PSAnc3RyaW5nJyApIHJldHVybiB2YWx1ZXNbdl07XG4gICAgICAgIGVsc2UgcmV0dXJuIHY7XG4gICAgfVxufTtcblxuY2xhc3MgRXZhbHVhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcGVyYXRvcnMpIHtcbiAgICAgICAgdGhpcy5fb3AgPSBvcGVyYXRvcnM7XG4gICAgICAgIHRoaXMucGFyc2VyID0gbmV3IFBhcnNlcihvcGVyYXRvcnMpO1xuICAgIH1cbiAgICBldmFsdWF0ZShleHAsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZVRyZWUodGhpcy5wYXJzZXIucGFyc2UoZXhwKSwgdmFsdWVzKTtcbiAgICB9XG4gICAgZXZhbHVhdGVUcmVlKHRyZWUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gZXZhbHVhdGVUcmVlKHRoaXMuX29wLCB0cmVlLCB2YWx1ZXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZhbHVhdG9yOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "evaluator.js"
      ],
      "names": [
        "evaluateTree",
        "operators",
        "treeHead",
        "values",
        "isOperator",
        "ch",
        "Object",
        "keys",
        "includes",
        "v",
        "value",
        "children",
        "map",
        "t",
        "opfn",
        "length",
        "fn",
        "ufn",
        "Evaluator",
        "_op",
        "parser",
        "Parser",
        "exp",
        "parse",
        "tree"
      ],
      "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,aAAT,CAAsBC,SAAtB,EAAiCC,QAAjC,EAA2CC,MAA3C,EAAmD;AAC/C,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,EAAE;AAAA,WAAIC,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,QAAvB,CAAgCH,EAAhC,CAAJ;AAAA,GAArB;;AACA,MAAII,CAAC,GAAGP,QAAQ,CAACQ,KAAjB;;AACA,MAAIN,UAAU,CAACK,CAAD,CAAd,EAAoB;AAChB,QAAIE,QAAQ,GAAGT,QAAQ,CAACS,QAAT,CAAkBC,GAAlB,CAAsB,UAAAC,CAAC;AAAA,aAAIb,aAAY,CAACC,SAAD,EAAYY,CAAZ,EAAeV,MAAf,CAAhB;AAAA,KAAvB,CAAf;AACA,QAAIW,IAAI,GAAGH,QAAQ,CAACI,MAAT,IAAmB,CAAnB,GAAuBd,SAAS,CAACQ,CAAD,CAAT,CAAaO,EAApC,GAAyCf,SAAS,CAACQ,CAAD,CAAT,CAAaQ,GAAjE;AAEA,WAAOH,IAAI,MAAJ,4BAAQH,QAAR,EAAP;AACH,GALD,MAKO;AACH,QAAI,OAAOF,CAAP,KAAa,QAAjB,EAA4B,OAAON,MAAM,CAACM,CAAD,CAAb,CAA5B,KACK,OAAOA,CAAP;AACR;AACJ;;AAAA;;IAEKS,S;AACF,qBAAYjB,SAAZ,EAAuB;AAAA;;AACnB,SAAKkB,GAAL,GAAWlB,SAAX;AACA,SAAKmB,MAAL,GAAc,IAAIC,kBAAJ,CAAWpB,SAAX,CAAd;AACH;;;;6BACQqB,G,EAAKnB,M,EAAQ;AAClB,aAAO,KAAKH,YAAL,CAAkB,KAAKoB,MAAL,CAAYG,KAAZ,CAAkBD,GAAlB,CAAlB,EAA0CnB,MAA1C,CAAP;AACH;;;iCACYqB,I,EAAMrB,M,EAAQ;AACvB,aAAOH,aAAY,CAAC,KAAKmB,GAAN,EAAWK,IAAX,EAAiBrB,MAAjB,CAAnB;AACH;;;;;;eAGUe,S",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "import Parser from './parser';\n\nfunction evaluateTree(operators, treeHead, values) {\n    const isOperator = ch => Object.keys(operators).includes(ch);\n    let v = treeHead.value;\n    if( isOperator(v) ) {\n        let children = treeHead.children.map(t => evaluateTree(operators, t, values));\n        let opfn = children.length == 2 ? operators[v].fn : operators[v].ufn;\n\n        return opfn(...children);\n    } else {\n        if( typeof v === 'string' ) return values[v];\n        else return v;\n    }\n};\n\nclass Evaluator {\n    constructor(operators) {\n        this._op = operators;\n        this.parser = new Parser(operators);\n    }\n    evaluate(exp, values) {\n        return this.evaluateTree(this.parser.parse(exp), values);\n    }\n    evaluateTree(tree, values) {\n        return evaluateTree(this._op, tree, values);\n    }\n}\n\nexport default Evaluator;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591407460074
  },
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/parser.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/parser.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/parser.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/parser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "parser.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar stackify = function stackify(arr) {\n  arr = arr || [];\n\n  arr.peek = function () {\n    return arr[arr.length - 1];\n  };\n\n  return arr;\n};\n\nvar assert = function assert(bool, msg) {\n  if (!bool) throw new Error(msg);\n};\n\nvar format = function format(tk) {\n  return typeof tk === 'string' ? {\n    value: tk,\n    children: []\n  } : tk;\n};\n\nvar makeTreeNode = function makeTreeNode(op, a, b) {\n  return {\n    value: op,\n    children: [a, b]\n  };\n}; // Break an expression into discrete tokens\n// for simpler preprocessing and parsing\n\n\nvar tokenize = function tokenize(operators, exp) {\n  var isOperator = function isOperator(chr) {\n    return Object.keys(operators).includes(chr);\n  };\n\n  var tokens = [];\n  var cur_token = '';\n\n  var push_token = function push_token() {\n    if (cur_token !== '') {\n      if (/^[0-9]+(\\.[0-9]+)?$/.test(cur_token)) {\n        tokens.push({\n          value: cur_token,\n          type: 'number'\n        });\n      } else {\n        assert(!cur_token.includes('.'), \"Identifiers may not contain periods!\");\n        assert(!/[0-9]/.test(cur_token[0]), \"Identifiers may not begin with digits!\");\n        tokens.push({\n          value: cur_token,\n          type: 'identifier'\n        });\n      }\n\n      cur_token = '';\n    }\n  };\n\n  var _iterator = _createForOfIteratorHelper(exp),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _char = _step.value;\n\n      if (/[a-zA-Z1-9_]/.test(_char)) {\n        cur_token += _char;\n      } else if (_char === '.' && /^[0-9]+$/.test(cur_token)) {\n        cur_token += _char;\n      } else if (/\\s/.test(_char)) {\n        push_token();\n      } else {\n        push_token();\n\n        if (isOperator(_char)) {\n          tokens.push({\n            value: _char,\n            type: 'operator'\n          });\n        } else tokens.push({\n          value: _char,\n          type: 'unknown'\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  push_token();\n  return tokens;\n};\n\nvar isOperand = function isOperand(tk) {\n  return tk.type === 'identifier' || tk.type === 'number';\n};\n\nvar parseExpression = function parseExpression(operators, exp) {\n  var OPERATOR = operators;\n\n  var isBinaryOperator = function isBinaryOperator(chr) {\n    return Object.keys(OPERATOR).filter(function (op) {\n      return OPERATOR[op].binary;\n    }).includes(chr);\n  };\n\n  var isUnaryOperator = function isUnaryOperator(chr) {\n    return Object.keys(OPERATOR).filter(function (op) {\n      return OPERATOR[op].unary;\n    }).includes(chr);\n  };\n\n  var operator_stack = stackify();\n  var operand_stack = stackify();\n  var unique_tokens = [];\n  var unaryOp = 0;\n\n  var aggregateUnaryOp = function aggregateUnaryOp() {\n    while (unaryOp > 0) {\n      var op = operator_stack.pop();\n      var operand = operand_stack.pop();\n      operand_stack.push({\n        value: op,\n        children: [format(operand)]\n      });\n      unaryOp--;\n    }\n  };\n\n  var tokens = tokenize(OPERATOR, exp);\n\n  var getToken = function getToken(idx) {\n    return idx >= 0 && idx < tokens.length ? tokens[idx] : null;\n  }; // check if expression is valid\n\n\n  var parenValid = 0;\n\n  for (var t = 0; t < tokens.length; t++) {\n    var token = tokens[t];\n\n    if (token.type === 'operator') {\n      if (isBinaryOperator(token.value)) {\n        var valid = false;\n        var tk = t + 1;\n\n        while (getToken(tk) !== null && !valid) {\n          if (isBinaryOperator(getToken(tk))) break;else if (isOperand(getToken(tk)) || getToken(tk).value === '(') valid = true;\n          tk++;\n        }\n\n        assert(valid, \"Binary operator must have a right-hand operand.\");\n        var prevToken = getToken(t - 1);\n\n        if (isUnaryOperator(token.value)) {\n          // operator only has a right-hand operand, and can function as a unary operator.\n          // as such, it will be treated as a unary operator when a LH operand is not found.\n          token.unary = true;\n        } else {\n          assert(prevToken !== null, \"Binary operator must have a left-hand operand.\");\n          assert(isOperand(prevToken) || prevToken.value === ')', \"Binary operator may not be directly preceded by an operator.\"); // either identifier or expression\n        }\n      } else {\n        var t2 = t + 1;\n        var operates = false;\n\n        while (!operates && getToken(t2) !== null) {\n          var cur = getToken(t2++);\n          operates = isOperand(cur) || cur.value === '(';\n        }\n\n        assert(\"Unary operator must operate on an identifier or expression.\");\n      }\n    } else if (isOperand(token)) {\n      var prevCheckToken = t - 1;\n      var _valid = true;\n\n      while (_valid && getToken(prevCheckToken) !== null) {\n        var _tk = getToken(prevCheckToken--);\n\n        if (isBinaryOperator(_tk.value)) break;else if (isOperand(_tk) || _tk.value === ')') _valid = false;\n      }\n\n      assert(_valid, \"Operands may not be placed adjacent to one another without an operator in between.\");\n    } else {\n      if (token.value === '(') {\n        parenValid++;\n      } else if (token.value === ')') {\n        assert(parenValid !== 0, \"Mismatched closing parenthesis.\");\n        parenValid--;\n      }\n    }\n  }\n\n  assert(parenValid === 0, \"Unclosed parenthesis in expression!\");\n  var grabbingExpression = false;\n  var expression = '';\n  var expParen = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(tokens),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _token = _step2.value;\n\n      // first check if grabbing expression\n      if (grabbingExpression) {\n        if (_token.value === '(') {\n          expParen++;\n          expression += '(';\n        } else if (_token.value === ')') {\n          expParen--;\n\n          if (expParen === 0) {\n            var _exp = parseExpression(operators, expression);\n\n            var exp_tk = _exp.tokens;\n\n            var _iterator3 = _createForOfIteratorHelper(exp_tk),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var _tk2 = _step3.value;\n                if (!unique_tokens.includes(_tk2)) unique_tokens.push(_tk2);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            delete _exp.tokens; // remove extraneous data from internal tree nodes\n\n            operand_stack.push(_exp);\n            aggregateUnaryOp();\n            expression = '';\n            grabbingExpression = false;\n          } else {\n            expression += ')';\n          }\n        } else expression += _token.value;\n\n        continue;\n      }\n\n      if (isOperand(_token)) {\n        operand_stack.push(_token.value);\n        aggregateUnaryOp();\n        if (_token.type === 'identifier' && !unique_tokens.includes(_token.value)) unique_tokens.push(_token.value);\n      } else if (isBinaryOperator(_token.value) && !_token.unary) {\n        if (operator_stack.length > 0 && OPERATOR[_token.value].precedence < OPERATOR[operator_stack.peek()].precedence) {\n          var operands = [operand_stack.pop()];\n          var _operators = [];\n          var prec = OPERATOR[operator_stack.peek()].precedence;\n\n          while (OPERATOR[operator_stack.peek()].precedence === prec) {\n            operands.push(operand_stack.pop());\n\n            _operators.push(operator_stack.pop());\n          }\n\n          while (_operators.length > 0) {\n            var _op = operands.pop();\n\n            var _op2 = operands.pop();\n\n            var new_operand = makeTreeNode(_operators.pop(), _op2, _op);\n            operands.push(new_operand);\n          }\n\n          operand_stack.push(operands[0]);\n        }\n\n        operator_stack.push(_token.value);\n      } else if (isUnaryOperator(_token.value)) {\n        unaryOp++;\n        operator_stack.push(_token.value);\n      } else if (_token.value === '(') {\n        grabbingExpression = true;\n        expParen++;\n      } else {\n        throw new Error(\"Unexpected character '\".concat(_token.value, \"'\"));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (grabbingExpression) {\n    throw new Error('Expression contains unmatched opening parenthesis.');\n  }\n\n  while (operator_stack.length > 0) {\n    var op2 = format(operand_stack.pop());\n    var op1 = format(operand_stack.pop());\n    var op = operator_stack.pop();\n    operand_stack.push(makeTreeNode(op, op1, op2));\n  }\n\n  if (operand_stack.length > 1) {\n    throw new Error('Too many operands!');\n  }\n\n  var retObj = format(operand_stack[0]);\n  retObj.tokens = unique_tokens;\n  return operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nvar recurseTree = function recurseTree(tree, fn) {\n  fn(tree);\n\n  if (tree.children.length > 0) {\n    var _iterator4 = _createForOfIteratorHelper(tree.children),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var child = _step4.value;\n        recurseTree(child, fn);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n};\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(operators) {\n    _classCallCheck(this, Parser);\n\n    this._op = operators;\n  }\n\n  _createClass(Parser, [{\n    key: \"parse\",\n    value: function parse(exp) {\n      var tree = parseExpression(this._op, exp); // recurse tree and replace all number strings with actual numbers\n\n      recurseTree(tree, function (node) {\n        if (/^[0-9]+(\\.[0-9]+)?$/.test(node.value)) {\n          node.value = parseFloat(node.value);\n        }\n      });\n      return tree;\n    }\n  }]);\n\n  return Parser;\n}();\n\nvar _default = Parser;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "parser.js"
      ],
      "names": [
        "stackify",
        "arr",
        "peek",
        "length",
        "assert",
        "bool",
        "msg",
        "Error",
        "format",
        "tk",
        "value",
        "children",
        "makeTreeNode",
        "op",
        "a",
        "b",
        "tokenize",
        "operators",
        "exp",
        "isOperator",
        "chr",
        "Object",
        "keys",
        "includes",
        "tokens",
        "cur_token",
        "push_token",
        "test",
        "push",
        "type",
        "char",
        "isOperand",
        "parseExpression",
        "OPERATOR",
        "isBinaryOperator",
        "filter",
        "binary",
        "isUnaryOperator",
        "unary",
        "operator_stack",
        "operand_stack",
        "unique_tokens",
        "unaryOp",
        "aggregateUnaryOp",
        "pop",
        "operand",
        "getToken",
        "idx",
        "parenValid",
        "t",
        "token",
        "valid",
        "prevToken",
        "t2",
        "operates",
        "cur",
        "prevCheckToken",
        "grabbingExpression",
        "expression",
        "expParen",
        "exp_tk",
        "precedence",
        "operands",
        "prec",
        "op2",
        "op1",
        "new_operand",
        "retObj",
        "recurseTree",
        "tree",
        "fn",
        "child",
        "Parser",
        "_op",
        "node",
        "parseFloat"
      ],
      "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAAC,GAAG,EAAI;AACvBA,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;;AACAA,EAAAA,GAAG,CAACC,IAAJ,GAAW;AAAA,WAAMD,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAW,CAAZ,CAAT;AAAA,GAAX;;AACA,SAAOF,GAAP;AACA,CAJD;;AAMA,IAAIG,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,GAAP,EAAe;AAC3B,MAAI,CAACD,IAAL,EAAY,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;AACZ,CAFD;;AAIA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACC,EAAD;AAAA,SAAQ,OAAOA,EAAP,KAAc,QAAd,GAAyB;AAAEC,IAAAA,KAAK,EAAED,EAAT;AAAaE,IAAAA,QAAQ,EAAE;AAAvB,GAAzB,GAAuDF,EAA/D;AAAA,CAAf;;AAEA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAKC,CAAL,EAAQC,CAAR,EAAc;AAClC,SAAO;AACNL,IAAAA,KAAK,EAAEG,EADD;AAENF,IAAAA,QAAQ,EAAE,CAACG,CAAD,EAAIC,CAAJ;AAFJ,GAAP;AAIA,CALD,C,CAOA;AACA;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAYC,GAAZ,EAAoB;AACjC,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,GAAG;AAAA,WAAIC,MAAM,CAACC,IAAP,CAAYL,SAAZ,EAAuBM,QAAvB,CAAgCH,GAAhC,CAAJ;AAAA,GAAtB;;AAEH,MAAII,MAAM,GAAG,EAAb;AAEA,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxB,QAAID,SAAS,KAAK,EAAlB,EAAuB;AACtB,UAAI,sBAAsBE,IAAtB,CAA2BF,SAA3B,CAAJ,EAA4C;AAC3CD,QAAAA,MAAM,CAACI,IAAP,CAAY;AACXlB,UAAAA,KAAK,EAAEe,SADI;AAEXI,UAAAA,IAAI,EAAE;AAFK,SAAZ;AAIA,OALD,MAKO;AACNzB,QAAAA,MAAM,CAAC,CAACqB,SAAS,CAACF,QAAV,CAAmB,GAAnB,CAAF,EAA2B,sCAA3B,CAAN;AACAnB,QAAAA,MAAM,CAAC,CAAC,QAAQuB,IAAR,CAAaF,SAAS,CAAC,CAAD,CAAtB,CAAF,EAA8B,wCAA9B,CAAN;AACAD,QAAAA,MAAM,CAACI,IAAP,CAAY;AACXlB,UAAAA,KAAK,EAAEe,SADI;AAEXI,UAAAA,IAAI,EAAE;AAFK,SAAZ;AAIA;;AACDJ,MAAAA,SAAS,GAAG,EAAZ;AACA;AACD,GAjBD;;AANoC,6CAyBnBP,GAzBmB;AAAA;;AAAA;AAyBpC,wDAAuB;AAAA,UAAdY,KAAc;;AACtB,UAAI,eAAeH,IAAf,CAAoBG,KAApB,CAAJ,EAAgC;AAC/BL,QAAAA,SAAS,IAAIK,KAAb;AACA,OAFD,MAEO,IAAIA,KAAI,KAAK,GAAT,IAAgB,WAAWH,IAAX,CAAgBF,SAAhB,CAApB,EAAiD;AACvDA,QAAAA,SAAS,IAAIK,KAAb;AACA,OAFM,MAEA,IAAI,KAAKH,IAAL,CAAUG,KAAV,CAAJ,EAAsB;AAC5BJ,QAAAA,UAAU;AACV,OAFM,MAEA;AACNA,QAAAA,UAAU;;AACV,YAAIP,UAAU,CAACW,KAAD,CAAd,EAAuB;AACtBN,UAAAA,MAAM,CAACI,IAAP,CAAY;AACXlB,YAAAA,KAAK,EAAEoB,KADI;AAEXD,YAAAA,IAAI,EAAE;AAFK,WAAZ;AAIA,SALD,MAKOL,MAAM,CAACI,IAAP,CAAY;AAClBlB,UAAAA,KAAK,EAAEoB,KADW;AAElBD,UAAAA,IAAI,EAAE;AAFY,SAAZ;AAIP;AACD;AA5CmC;AAAA;AAAA;AAAA;AAAA;;AA8CpCH,EAAAA,UAAU;AAEV,SAAOF,MAAP;AACA,CAjDD;;AAmDA,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAAAtB,EAAE,EAAI;AACvB,SAAOA,EAAE,CAACoB,IAAH,KAAY,YAAZ,IAA4BpB,EAAE,CAACoB,IAAH,KAAY,QAA/C;AACA,CAFD;;AAIA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACf,SAAD,EAAYC,GAAZ,EAAoB;AACxC,MAAMe,QAAQ,GAAGhB,SAAjB;;AACA,MAAMiB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAd,GAAG;AAAA,WAAIC,MAAM,CAACC,IAAP,CAAYW,QAAZ,EAAsBE,MAAtB,CAA6B,UAAAtB,EAAE;AAAA,aAAIoB,QAAQ,CAACpB,EAAD,CAAR,CAAauB,MAAjB;AAAA,KAA/B,EAAwDb,QAAxD,CAAiEH,GAAjE,CAAJ;AAAA,GAA5B;;AACA,MAAMiB,eAAe,GAAG,SAAlBA,eAAkB,CAAAjB,GAAG;AAAA,WAAIC,MAAM,CAACC,IAAP,CAAYW,QAAZ,EAAsBE,MAAtB,CAA6B,UAAAtB,EAAE;AAAA,aAAIoB,QAAQ,CAACpB,EAAD,CAAR,CAAayB,KAAjB;AAAA,KAA/B,EAAuDf,QAAvD,CAAgEH,GAAhE,CAAJ;AAAA,GAA3B;;AAEH,MAAMmB,cAAc,GAAGvC,QAAQ,EAA/B;AACA,MAAMwC,aAAa,GAAGxC,QAAQ,EAA9B;AAEA,MAAIyC,aAAa,GAAG,EAApB;AAEA,MAAIC,OAAO,GAAG,CAAd;;AACG,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3B,WAAOD,OAAO,GAAG,CAAjB,EAAqB;AACjB,UAAI7B,EAAE,GAAG0B,cAAc,CAACK,GAAf,EAAT;AACA,UAAIC,OAAO,GAAGL,aAAa,CAACI,GAAd,EAAd;AACAJ,MAAAA,aAAa,CAACZ,IAAd,CAAmB;AACflB,QAAAA,KAAK,EAAEG,EADQ;AAEfF,QAAAA,QAAQ,EAAE,CAACH,MAAM,CAACqC,OAAD,CAAP;AAFK,OAAnB;AAIAH,MAAAA,OAAO;AACV;AACP,GAVE;;AAYH,MAAIlB,MAAM,GAAGR,QAAQ,CAACiB,QAAD,EAAWf,GAAX,CAArB;;AAEA,MAAI4B,QAAQ,GAAG,SAAXA,QAAW,CAAAC,GAAG;AAAA,WAAKA,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGvB,MAAM,CAACrB,MAA1B,GAAoCqB,MAAM,CAACuB,GAAD,CAA1C,GAAkD,IAAtD;AAAA,GAAlB,CAzB2C,CA2B3C;;;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,MAAM,CAACrB,MAA3B,EAAmC8C,CAAC,EAApC,EAAyC;AACxC,QAAIC,KAAK,GAAG1B,MAAM,CAACyB,CAAD,CAAlB;;AACA,QAAIC,KAAK,CAACrB,IAAN,KAAe,UAAnB,EAAgC;AAC/B,UAAIK,gBAAgB,CAACgB,KAAK,CAACxC,KAAP,CAApB,EAAoC;AACnC,YAAIyC,KAAK,GAAG,KAAZ;AACA,YAAI1C,EAAE,GAAGwC,CAAC,GAAC,CAAX;;AACA,eAAOH,QAAQ,CAACrC,EAAD,CAAR,KAAiB,IAAjB,IAAyB,CAAC0C,KAAjC,EAAyC;AACxC,cAAIjB,gBAAgB,CAACY,QAAQ,CAACrC,EAAD,CAAT,CAApB,EAAqC,MAArC,KACK,IAAIsB,SAAS,CAACe,QAAQ,CAACrC,EAAD,CAAT,CAAT,IAA2BqC,QAAQ,CAACrC,EAAD,CAAR,CAAaC,KAAb,KAAuB,GAAtD,EAA4DyC,KAAK,GAAG,IAAR;AACjE1C,UAAAA,EAAE;AACF;;AACDL,QAAAA,MAAM,CAAC+C,KAAD,EAAQ,iDAAR,CAAN;AAEA,YAAIC,SAAS,GAAGN,QAAQ,CAACG,CAAC,GAAC,CAAH,CAAxB;;AACA,YAAIZ,eAAe,CAACa,KAAK,CAACxC,KAAP,CAAnB,EAAmC;AAClC;AACA;AACAwC,UAAAA,KAAK,CAACZ,KAAN,GAAc,IAAd;AACA,SAJD,MAIO;AACNlC,UAAAA,MAAM,CAACgD,SAAS,KAAK,IAAf,EAAqB,gDAArB,CAAN;AACAhD,UAAAA,MAAM,CAAC2B,SAAS,CAACqB,SAAD,CAAT,IAAwBA,SAAS,CAAC1C,KAAV,KAAoB,GAA7C,EAAkD,8DAAlD,CAAN,CAFM,CAEmH;AACzH;AACD,OAnBD,MAmBO;AACN,YAAI2C,EAAE,GAAGJ,CAAC,GAAC,CAAX;AACA,YAAIK,QAAQ,GAAG,KAAf;;AACA,eAAO,CAACA,QAAD,IAAaR,QAAQ,CAACO,EAAD,CAAR,KAAiB,IAArC,EAA4C;AAC3C,cAAIE,GAAG,GAAGT,QAAQ,CAACO,EAAE,EAAH,CAAlB;AACAC,UAAAA,QAAQ,GAAGvB,SAAS,CAACwB,GAAD,CAAT,IAAkBA,GAAG,CAAC7C,KAAJ,KAAc,GAA3C;AACA;;AACDN,QAAAA,MAAM,CAAC,6DAAD,CAAN;AACA;AACD,KA7BD,MA6BO,IAAI2B,SAAS,CAACmB,KAAD,CAAb,EAAuB;AAC7B,UAAIM,cAAc,GAAGP,CAAC,GAAC,CAAvB;AACA,UAAIE,MAAK,GAAG,IAAZ;;AACA,aAAOA,MAAK,IAAIL,QAAQ,CAACU,cAAD,CAAR,KAA6B,IAA7C,EAAoD;AACnD,YAAI/C,GAAE,GAAGqC,QAAQ,CAACU,cAAc,EAAf,CAAjB;;AACA,YAAItB,gBAAgB,CAACzB,GAAE,CAACC,KAAJ,CAApB,EAAiC,MAAjC,KACK,IAAIqB,SAAS,CAACtB,GAAD,CAAT,IAAiBA,GAAE,CAACC,KAAH,KAAa,GAAlC,EAAwCyC,MAAK,GAAG,KAAR;AAC7C;;AACD/C,MAAAA,MAAM,CAAC+C,MAAD,EAAQ,oFAAR,CAAN;AACA,KATM,MASA;AACN,UAAID,KAAK,CAACxC,KAAN,KAAgB,GAApB,EAA0B;AACzBsC,QAAAA,UAAU;AACV,OAFD,MAEO,IAAIE,KAAK,CAACxC,KAAN,KAAgB,GAApB,EAA0B;AAChCN,QAAAA,MAAM,CAAC4C,UAAU,KAAK,CAAhB,EAAmB,iCAAnB,CAAN;AACAA,QAAAA,UAAU;AACV;AACD;AACD;;AAED5C,EAAAA,MAAM,CAAC4C,UAAU,KAAK,CAAhB,EAAmB,qCAAnB,CAAN;AAEA,MAAIS,kBAAkB,GAAG,KAAzB;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,QAAQ,GAAG,CAAf;;AAnF2C,8CAoFzBnC,MApFyB;AAAA;;AAAA;AAoF3C,2DAA2B;AAAA,UAAlB0B,MAAkB;;AAC1B;AACA,UAAIO,kBAAJ,EAAyB;AACxB,YAAIP,MAAK,CAACxC,KAAN,KAAgB,GAApB,EAA0B;AACzBiD,UAAAA,QAAQ;AACRD,UAAAA,UAAU,IAAI,GAAd;AACA,SAHD,MAGO,IAAIR,MAAK,CAACxC,KAAN,KAAgB,GAApB,EAA0B;AAChCiD,UAAAA,QAAQ;;AACR,cAAIA,QAAQ,KAAK,CAAjB,EAAqB;AACpB,gBAAIzC,IAAG,GAAGc,eAAe,CAACf,SAAD,EAAYyC,UAAZ,CAAzB;;AACe,gBAAIE,MAAM,GAAG1C,IAAG,CAACM,MAAjB;;AAFK,wDAGUoC,MAHV;AAAA;;AAAA;AAGL,qEAAwB;AAAA,oBAAfnD,IAAe;AACpB,oBAAI,CAACgC,aAAa,CAAClB,QAAd,CAAuBd,IAAvB,CAAL,EAAkCgC,aAAa,CAACb,IAAd,CAAmBnB,IAAnB;AACrC;AALI;AAAA;AAAA;AAAA;AAAA;;AAML,mBAAOS,IAAG,CAACM,MAAX,CANK,CAMc;;AACnBgB,YAAAA,aAAa,CAACZ,IAAd,CAAmBV,IAAnB;AACAyB,YAAAA,gBAAgB;AAC/Be,YAAAA,UAAU,GAAG,EAAb;AACAD,YAAAA,kBAAkB,GAAG,KAArB;AACA,WAXD,MAWO;AACNC,YAAAA,UAAU,IAAI,GAAd;AACA;AACD,SAhBM,MAgBAA,UAAU,IAAIR,MAAK,CAACxC,KAApB;;AACP;AACA;;AAED,UAAIqB,SAAS,CAACmB,MAAD,CAAb,EAAuB;AACtBV,QAAAA,aAAa,CAACZ,IAAd,CAAmBsB,MAAK,CAACxC,KAAzB;AACAiC,QAAAA,gBAAgB;AAChB,YAAIO,MAAK,CAACrB,IAAN,KAAe,YAAf,IAA+B,CAACY,aAAa,CAAClB,QAAd,CAAuB2B,MAAK,CAACxC,KAA7B,CAApC,EAA0E+B,aAAa,CAACb,IAAd,CAAmBsB,MAAK,CAACxC,KAAzB;AAC1E,OAJD,MAIO,IAAIwB,gBAAgB,CAACgB,MAAK,CAACxC,KAAP,CAAhB,IAAiC,CAACwC,MAAK,CAACZ,KAA5C,EAAoD;AAC1D,YAAIC,cAAc,CAACpC,MAAf,GAAwB,CAAxB,IAA6B8B,QAAQ,CAACiB,MAAK,CAACxC,KAAP,CAAR,CAAsBmD,UAAtB,GAAmC5B,QAAQ,CAACM,cAAc,CAACrC,IAAf,EAAD,CAAR,CAAgC2D,UAApG,EAAiH;AAChH,cAAMC,QAAQ,GAAG,CAACtB,aAAa,CAACI,GAAd,EAAD,CAAjB;AACA,cAAM3B,UAAS,GAAG,EAAlB;AACA,cAAI8C,IAAI,GAAG9B,QAAQ,CAACM,cAAc,CAACrC,IAAf,EAAD,CAAR,CAAgC2D,UAA3C;;AACA,iBAAO5B,QAAQ,CAACM,cAAc,CAACrC,IAAf,EAAD,CAAR,CAAgC2D,UAAhC,KAA+CE,IAAtD,EAA6D;AAC5DD,YAAAA,QAAQ,CAAClC,IAAT,CAAcY,aAAa,CAACI,GAAd,EAAd;;AACA3B,YAAAA,UAAS,CAACW,IAAV,CAAeW,cAAc,CAACK,GAAf,EAAf;AACA;;AACD,iBAAM3B,UAAS,CAACd,MAAV,GAAmB,CAAzB,EAA4B;AACZ,gBAAI6D,GAAG,GAAGF,QAAQ,CAAClB,GAAT,EAAV;;AACA,gBAAIqB,IAAG,GAAGH,QAAQ,CAAClB,GAAT,EAAV;;AACf,gBAAIsB,WAAW,GAAGtD,YAAY,CAACK,UAAS,CAAC2B,GAAV,EAAD,EAAkBqB,IAAlB,EAAuBD,GAAvB,CAA9B;AACAF,YAAAA,QAAQ,CAAClC,IAAT,CAAcsC,WAAd;AACA;;AACD1B,UAAAA,aAAa,CAACZ,IAAd,CAAmBkC,QAAQ,CAAC,CAAD,CAA3B;AACA;;AACDvB,QAAAA,cAAc,CAACX,IAAf,CAAoBsB,MAAK,CAACxC,KAA1B;AACA,OAlBM,MAkBA,IAAI2B,eAAe,CAACa,MAAK,CAACxC,KAAP,CAAnB,EAAmC;AACzCgC,QAAAA,OAAO;AACPH,QAAAA,cAAc,CAACX,IAAf,CAAoBsB,MAAK,CAACxC,KAA1B;AACA,OAHM,MAGA,IAAIwC,MAAK,CAACxC,KAAN,KAAgB,GAApB,EAA0B;AAChC+C,QAAAA,kBAAkB,GAAG,IAArB;AACAE,QAAAA,QAAQ;AACR,OAHM,MAGA;AACN,cAAM,IAAIpD,KAAJ,iCAAmC2C,MAAK,CAACxC,KAAzC,OAAN;AACA;AACD;AA7I0C;AAAA;AAAA;AAAA;AAAA;;AA+I3C,MAAI+C,kBAAJ,EAAyB;AACxB,UAAM,IAAIlD,KAAJ,CAAU,oDAAV,CAAN;AACA;;AAED,SAAMgC,cAAc,CAACpC,MAAf,GAAwB,CAA9B,EAAiC;AAChC,QAAI6D,GAAG,GAAGxD,MAAM,CAACgC,aAAa,CAACI,GAAd,EAAD,CAAhB;AACA,QAAIqB,GAAG,GAAGzD,MAAM,CAACgC,aAAa,CAACI,GAAd,EAAD,CAAhB;AACM,QAAI/B,EAAE,GAAG0B,cAAc,CAACK,GAAf,EAAT;AAENJ,IAAAA,aAAa,CAACZ,IAAd,CAAmBhB,YAAY,CAACC,EAAD,EAAKoD,GAAL,EAAUD,GAAV,CAA/B;AACA;;AACD,MAAIxB,aAAa,CAACrC,MAAd,GAAuB,CAA3B,EAA+B;AAC9B,UAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;AACG;;AAED,MAAI4D,MAAM,GAAG3D,MAAM,CAACgC,aAAa,CAAC,CAAD,CAAd,CAAnB;AACH2B,EAAAA,MAAM,CAAC3C,MAAP,GAAgBiB,aAAhB;AAEA,SAAOD,aAAa,CAAC,CAAD,CAApB,CAjK2C,CAiKlB;AACzB,CAlKD;;AAoKA,IAAM4B,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOC,EAAP,EAAc;AACjCA,EAAAA,EAAE,CAACD,IAAD,CAAF;;AACA,MAAIA,IAAI,CAAC1D,QAAL,CAAcR,MAAd,GAAuB,CAA3B,EAA+B;AAAA,gDACZkE,IAAI,CAAC1D,QADO;AAAA;;AAAA;AAC9B,6DAAkC;AAAA,YAAzB4D,KAAyB;AACjCH,QAAAA,WAAW,CAACG,KAAD,EAAQD,EAAR,CAAX;AACA;AAH6B;AAAA;AAAA;AAAA;AAAA;AAI9B;AACD,CAPD;;IASME,M;AACF,kBAAYvD,SAAZ,EAAuB;AAAA;;AACnB,SAAKwD,GAAL,GAAWxD,SAAX;AACH;;;;0BACKC,G,EAAK;AACb,UAAImD,IAAI,GAAGrC,eAAe,CAAC,KAAKyC,GAAN,EAAWvD,GAAX,CAA1B,CADa,CAEb;;AACAkD,MAAAA,WAAW,CAACC,IAAD,EAAO,UAAAK,IAAI,EAAI;AACzB,YAAI,sBAAsB/C,IAAtB,CAA2B+C,IAAI,CAAChE,KAAhC,CAAJ,EAA6C;AAC5CgE,UAAAA,IAAI,CAAChE,KAAL,GAAaiE,UAAU,CAACD,IAAI,CAAChE,KAAN,CAAvB;AACA;AACD,OAJU,CAAX;AAKA,aAAO2D,IAAP;AACG;;;;;;eAGUG,M",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "const stackify = arr => {\n\tarr = arr || [];\n\tarr.peek = () => arr[arr.length-1];\n\treturn arr;\n};\n\nlet assert = (bool, msg) => {\n\tif( !bool ) throw new Error(msg);\n};\n\nconst format = (tk) => typeof tk === 'string' ? { value: tk, children: [] } : tk;\n\nconst makeTreeNode = (op, a, b) => {\n\treturn {\n\t\tvalue: op,\n\t\tchildren: [a, b]\n\t}\n};\n\n// Break an expression into discrete tokens\n// for simpler preprocessing and parsing\nconst tokenize = (operators, exp) => {\n    const isOperator = chr => Object.keys(operators).includes(chr);\n\n\tlet tokens = [];\n\n\tlet cur_token = '';\n\tconst push_token = () => {\n\t\tif( cur_token !== '' ) {\n\t\t\tif( /^[0-9]+(\\.[0-9]+)?$/.test(cur_token) ) {\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: cur_token,\n\t\t\t\t\ttype: 'number'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tassert(!cur_token.includes('.'), \"Identifiers may not contain periods!\");\n\t\t\t\tassert(!/[0-9]/.test(cur_token[0]), \"Identifiers may not begin with digits!\");\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: cur_token,\n\t\t\t\t\ttype: 'identifier'\n\t\t\t\t});\n\t\t\t}\n\t\t\tcur_token = '';\n\t\t}\n\t};\n\n\tfor( let char of exp ) {\n\t\tif( /[a-zA-Z1-9_]/.test(char) ) {\n\t\t\tcur_token += char;\n\t\t} else if( char === '.' && /^[0-9]+$/.test(cur_token) ) {\n\t\t\tcur_token += char;\n\t\t} else if( /\\s/.test(char) ) {\n\t\t\tpush_token();\n\t\t} else {\n\t\t\tpush_token();\n\t\t\tif( isOperator(char) ) {\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: char,\n\t\t\t\t\ttype: 'operator'\n\t\t\t\t});\n\t\t\t} else tokens.push({\n\t\t\t\tvalue: char,\n\t\t\t\ttype: 'unknown'\n\t\t\t});\n\t\t}\n\t}\n\n\tpush_token();\n\n\treturn tokens;\n};\n\nconst isOperand = tk => {\n\treturn tk.type === 'identifier' || tk.type === 'number';\n}\n\nconst parseExpression = (operators, exp) => {\n    const OPERATOR = operators;\n    const isBinaryOperator = chr => Object.keys(OPERATOR).filter(op => OPERATOR[op].binary).includes(chr);\n    const isUnaryOperator = chr => Object.keys(OPERATOR).filter(op => OPERATOR[op].unary).includes(chr);\n\n\tconst operator_stack = stackify();\n\tconst operand_stack = stackify();\n\n\tlet unique_tokens = [];\n\n\tlet unaryOp = 0;\n    const aggregateUnaryOp = () => {\n        while( unaryOp > 0 ) {\n            let op = operator_stack.pop();\n            let operand = operand_stack.pop();\n            operand_stack.push({\n                value: op,\n                children: [format(operand)]\n            });\n            unaryOp--;\n        }\n\t};\n    \n\tlet tokens = tokenize(OPERATOR, exp);\n\n\tlet getToken = idx => (idx >= 0 && idx < tokens.length) ? tokens[idx] : null;\n\n\t// check if expression is valid\n\tlet parenValid = 0;\n\tfor( let t = 0; t < tokens.length; t++ ) {\n\t\tlet token = tokens[t];\n\t\tif( token.type === 'operator' ) {\n\t\t\tif( isBinaryOperator(token.value) ) {\n\t\t\t\tlet valid = false;\n\t\t\t\tlet tk = t+1;\n\t\t\t\twhile( getToken(tk) !== null && !valid ) {\n\t\t\t\t\tif( isBinaryOperator(getToken(tk)) ) break;\n\t\t\t\t\telse if( isOperand(getToken(tk)) || getToken(tk).value === '(' ) valid = true;\n\t\t\t\t\ttk++;\n\t\t\t\t}\n\t\t\t\tassert(valid, \"Binary operator must have a right-hand operand.\");\n\n\t\t\t\tlet prevToken = getToken(t-1);\n\t\t\t\tif( isUnaryOperator(token.value) ) {\n\t\t\t\t\t// operator only has a right-hand operand, and can function as a unary operator.\n\t\t\t\t\t// as such, it will be treated as a unary operator when a LH operand is not found.\n\t\t\t\t\ttoken.unary = true;\n\t\t\t\t} else {\n\t\t\t\t\tassert(prevToken !== null, \"Binary operator must have a left-hand operand.\");\n\t\t\t\t\tassert(isOperand(prevToken) || prevToken.value === ')', \"Binary operator may not be directly preceded by an operator.\"); // either identifier or expression\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet t2 = t+1;\n\t\t\t\tlet operates = false;\n\t\t\t\twhile( !operates && getToken(t2) !== null ) {\n\t\t\t\t\tlet cur = getToken(t2++);\n\t\t\t\t\toperates = isOperand(cur) || cur.value === '(';\n\t\t\t\t}\n\t\t\t\tassert(\"Unary operator must operate on an identifier or expression.\");\n\t\t\t}\n\t\t} else if( isOperand(token) ) {\n\t\t\tlet prevCheckToken = t-1;\n\t\t\tlet valid = true;\n\t\t\twhile( valid && getToken(prevCheckToken) !== null ) {\n\t\t\t\tlet tk = getToken(prevCheckToken--);\n\t\t\t\tif( isBinaryOperator(tk.value) ) break;\n\t\t\t\telse if( isOperand(tk) || tk.value === ')' ) valid = false;\n\t\t\t}\n\t\t\tassert(valid, \"Operands may not be placed adjacent to one another without an operator in between.\");\n\t\t} else {\n\t\t\tif( token.value === '(' ) {\n\t\t\t\tparenValid++;\n\t\t\t} else if( token.value === ')' ) {\n\t\t\t\tassert(parenValid !== 0, \"Mismatched closing parenthesis.\");\n\t\t\t\tparenValid--;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tassert(parenValid === 0, \"Unclosed parenthesis in expression!\");\n\n\tlet grabbingExpression = false;\n\tlet expression = '';\n\tlet expParen = 0;\n\tfor( let token of tokens ) {\n\t\t// first check if grabbing expression\n\t\tif( grabbingExpression ) {\n\t\t\tif( token.value === '(' ) {\n\t\t\t\texpParen++;\n\t\t\t\texpression += '(';\n\t\t\t} else if( token.value === ')' ) {\n\t\t\t\texpParen--;\n\t\t\t\tif( expParen === 0 ) {\n\t\t\t\t\tlet exp = parseExpression(operators, expression);\n                    let exp_tk = exp.tokens;\n                    for( let tk of exp_tk ) {\n                        if( !unique_tokens.includes(tk) ) unique_tokens.push(tk);\n                    }\n                    delete exp.tokens; // remove extraneous data from internal tree nodes\n                    operand_stack.push(exp);\n                    aggregateUnaryOp();\n\t\t\t\t\texpression = '';\n\t\t\t\t\tgrabbingExpression = false;\n\t\t\t\t} else {\n\t\t\t\t\texpression += ')';\n\t\t\t\t}\n\t\t\t} else expression += token.value;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif( isOperand(token) ) {\n\t\t\toperand_stack.push(token.value);\n\t\t\taggregateUnaryOp();\n\t\t\tif( token.type === 'identifier' && !unique_tokens.includes(token.value) ) unique_tokens.push(token.value);\n\t\t} else if( isBinaryOperator(token.value) && !token.unary ) {\n\t\t\tif( operator_stack.length > 0 && OPERATOR[token.value].precedence < OPERATOR[operator_stack.peek()].precedence ) {\n\t\t\t\tconst operands = [operand_stack.pop()];\n\t\t\t\tconst operators = [];\n\t\t\t\tlet prec = OPERATOR[operator_stack.peek()].precedence;\n\t\t\t\twhile( OPERATOR[operator_stack.peek()].precedence === prec ) {\n\t\t\t\t\toperands.push(operand_stack.pop());\n\t\t\t\t\toperators.push(operator_stack.pop());\n\t\t\t\t}\n\t\t\t\twhile(operators.length > 0) {\n                    let op2 = operands.pop();\n                    let op1 = operands.pop();\n\t\t\t\t\tlet new_operand = makeTreeNode(operators.pop(), op1, op2);\n\t\t\t\t\toperands.push(new_operand);\n\t\t\t\t}\n\t\t\t\toperand_stack.push(operands[0]);\n\t\t\t}\n\t\t\toperator_stack.push(token.value);\n\t\t} else if( isUnaryOperator(token.value) ) {\n\t\t\tunaryOp++;\n\t\t\toperator_stack.push(token.value);\n\t\t} else if( token.value === '(' ) {\n\t\t\tgrabbingExpression = true;\n\t\t\texpParen++;\n\t\t} else {\n\t\t\tthrow new Error(`Unexpected character '${token.value}'`);\n\t\t}\n\t}\n\n\tif( grabbingExpression ) {\n\t\tthrow new Error('Expression contains unmatched opening parenthesis.');\n\t}\n\n\twhile(operator_stack.length > 0) {\n\t\tlet op2 = format(operand_stack.pop());\n\t\tlet op1 = format(operand_stack.pop());\n        let op = operator_stack.pop();\n\n\t\toperand_stack.push(makeTreeNode(op, op1, op2));\n\t}\n\tif( operand_stack.length > 1 ) {\n\t\tthrow new Error('Too many operands!');\n    }\n\n    let retObj = format(operand_stack[0]);\n\tretObj.tokens = unique_tokens;\n\n\treturn operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nconst recurseTree = (tree, fn) => {\n\tfn(tree);\n\tif( tree.children.length > 0 ) {\n\t\tfor( let child of tree.children ) {\n\t\t\trecurseTree(child, fn);\n\t\t}\n\t}\n};\n\nclass Parser {\n    constructor(operators) {\n        this._op = operators;\n    }\n    parse(exp) {\n\t\tlet tree = parseExpression(this._op, exp);\n\t\t// recurse tree and replace all number strings with actual numbers\n\t\trecurseTree(tree, node => {\n\t\t\tif( /^[0-9]+(\\.[0-9]+)?$/.test(node.value) ) {\n\t\t\t\tnode.value = parseFloat(node.value);\n\t\t\t}\n\t\t});\n\t\treturn tree;\n    }\n}\n\nexport default Parser;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591407386826
  },
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/test.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _arithexp = _interopRequireDefault(require(\"./arithexp\"));\n\nvar _boolexp = _interopRequireDefault(require(\"./boolexp\"));\n\nvar _util = _interopRequireDefault(require(\"util\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar exp = new _arithexp[\"default\"]('1 + --3');\nconsole.log(_util[\"default\"].inspect(exp.tree, false, 8));\nconsole.log(exp.evaluate());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiZXhwIiwiQXJpdGhtZXRpY0V4cHJlc3Npb24iLCJjb25zb2xlIiwibG9nIiwidXRpbCIsImluc3BlY3QiLCJ0cmVlIiwiZXZhbHVhdGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxHQUFHLEdBQUcsSUFBSUMsb0JBQUosQ0FBeUIsU0FBekIsQ0FBWjtBQUNBQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsaUJBQUtDLE9BQUwsQ0FBYUwsR0FBRyxDQUFDTSxJQUFqQixFQUF1QixLQUF2QixFQUE4QixDQUE5QixDQUFaO0FBQ0FKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxHQUFHLENBQUNPLFFBQUosRUFBWiIsInNvdXJjZVJvb3QiOiIvaG9tZS9pc2FhYy9QZXJzb25hbC9wYXJzZXJzLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcml0aG1ldGljRXhwcmVzc2lvbiBmcm9tICcuL2FyaXRoZXhwJztcbmltcG9ydCBCb29sZWFuRXhwcmVzc2lvbiBmcm9tICcuL2Jvb2xleHAnO1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5cbmNvbnN0IGV4cCA9IG5ldyBBcml0aG1ldGljRXhwcmVzc2lvbignMSArIC0tMycpO1xuY29uc29sZS5sb2codXRpbC5pbnNwZWN0KGV4cC50cmVlLCBmYWxzZSwgOCkpO1xuY29uc29sZS5sb2coZXhwLmV2YWx1YXRlKCkpOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "exp",
        "ArithmeticExpression",
        "console",
        "log",
        "util",
        "inspect",
        "tree",
        "evaluate"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,IAAIC,oBAAJ,CAAyB,SAAzB,CAAZ;AACAC,OAAO,CAACC,GAAR,CAAYC,iBAAKC,OAAL,CAAaL,GAAG,CAACM,IAAjB,EAAuB,KAAvB,EAA8B,CAA9B,CAAZ;AACAJ,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACO,QAAJ,EAAZ",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "import ArithmeticExpression from './arithexp';\nimport BooleanExpression from './boolexp';\nimport util from 'util';\n\nconst exp = new ArithmeticExpression('1 + --3');\nconsole.log(util.inspect(exp.tree, false, 8));\nconsole.log(exp.evaluate());"
      ]
    },
    "sourceType": "script",
    "mtime": 1591407829672
  },
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/boolexp.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/boolexp.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/boolexp.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/boolexp.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "boolexp.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _evaluator = _interopRequireDefault(require(\"./evaluator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar OPERATOR = {\n  // operator precedence\n  '*': {\n    precedence: 2,\n    binary: true,\n    unary: false,\n    fn: function fn(a, b) {\n      return a && b;\n    }\n  },\n  '+': {\n    precedence: 1,\n    binary: true,\n    unary: false,\n    fn: function fn(a, b) {\n      return a || b;\n    }\n  },\n  '~': {\n    binary: false,\n    unary: true,\n    ufn: function ufn(a) {\n      return !a;\n    }\n  }\n};\nvar BOOLEAN_EVALUATOR = new _evaluator[\"default\"](OPERATOR);\n\nvar Expression = /*#__PURE__*/function () {\n  function Expression(exp) {\n    _classCallCheck(this, Expression);\n\n    if (typeof exp !== 'string') {\n      throw new Error(\"Expression constructor takes in a boolean expression.\");\n    }\n\n    this.tree = BOOLEAN_EVALUATOR.parser.parse(exp);\n  }\n\n  _createClass(Expression, [{\n    key: \"getTokens\",\n    value: function getTokens() {\n      return this.tree.tokens;\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(values) {\n      var _iterator = _createForOfIteratorHelper(this.tree.tokens),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var token = _step.value;\n          if (!values.hasOwnProperty(token)) throw new Error(\"values must define a boolean value for every variable.\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return BOOLEAN_EVALUATOR.evaluate(this.tree, values);\n    }\n  }]);\n\n  return Expression;\n}();\n\nvar _default = Expression;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb2xleHAuanMiXSwibmFtZXMiOlsiT1BFUkFUT1IiLCJwcmVjZWRlbmNlIiwiYmluYXJ5IiwidW5hcnkiLCJmbiIsImEiLCJiIiwidWZuIiwiQk9PTEVBTl9FVkFMVUFUT1IiLCJFdmFsdWF0b3IiLCJFeHByZXNzaW9uIiwiZXhwIiwiRXJyb3IiLCJ0cmVlIiwicGFyc2VyIiwicGFyc2UiLCJ0b2tlbnMiLCJ2YWx1ZXMiLCJ0b2tlbiIsImhhc093blByb3BlcnR5IiwiZXZhbHVhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFFBQVEsR0FBRztBQUNoQjtBQUNBLE9BQUs7QUFDRUMsSUFBQUEsVUFBVSxFQUFFLENBRGQ7QUFFRUMsSUFBQUEsTUFBTSxFQUFFLElBRlY7QUFHRUMsSUFBQUEsS0FBSyxFQUFFLEtBSFQ7QUFJSkMsSUFBQUEsRUFBRSxFQUFFLFlBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLGFBQVVELENBQUMsSUFBSUMsQ0FBZjtBQUFBO0FBSkEsR0FGVztBQVFoQixPQUFLO0FBQ0VMLElBQUFBLFVBQVUsRUFBRSxDQURkO0FBRUVDLElBQUFBLE1BQU0sRUFBRSxJQUZWO0FBR0VDLElBQUFBLEtBQUssRUFBRSxLQUhUO0FBSUpDLElBQUFBLEVBQUUsRUFBRSxZQUFDQyxDQUFELEVBQUlDLENBQUo7QUFBQSxhQUFVRCxDQUFDLElBQUlDLENBQWY7QUFBQTtBQUpBLEdBUlc7QUFjYixPQUFLO0FBQ0RKLElBQUFBLE1BQU0sRUFBRSxLQURQO0FBRURDLElBQUFBLEtBQUssRUFBRSxJQUZOO0FBR0RJLElBQUFBLEdBQUcsRUFBRSxhQUFBRixDQUFDO0FBQUEsYUFBSSxDQUFDQSxDQUFMO0FBQUE7QUFITDtBQWRRLENBQWpCO0FBcUJBLElBQU1HLGlCQUFpQixHQUFHLElBQUlDLHFCQUFKLENBQWNULFFBQWQsQ0FBMUI7O0lBRU1VLFU7QUFDRixzQkFBWUMsR0FBWixFQUFpQjtBQUFBOztBQUNiLFFBQUksT0FBT0EsR0FBUCxLQUFlLFFBQW5CLEVBQThCO0FBQzFCLFlBQU0sSUFBSUMsS0FBSixDQUFVLHVEQUFWLENBQU47QUFDSDs7QUFDRCxTQUFLQyxJQUFMLEdBQVlMLGlCQUFpQixDQUFDTSxNQUFsQixDQUF5QkMsS0FBekIsQ0FBK0JKLEdBQS9CLENBQVo7QUFDSDs7OztnQ0FDVztBQUNSLGFBQU8sS0FBS0UsSUFBTCxDQUFVRyxNQUFqQjtBQUNIOzs7NkJBQ1FDLE0sRUFBUTtBQUFBLGlEQUNLLEtBQUtKLElBQUwsQ0FBVUcsTUFEZjtBQUFBOztBQUFBO0FBQ2IsNERBQXFDO0FBQUEsY0FBNUJFLEtBQTRCO0FBQ2pDLGNBQUksQ0FBQ0QsTUFBTSxDQUFDRSxjQUFQLENBQXNCRCxLQUF0QixDQUFMLEVBQW9DLE1BQU0sSUFBSU4sS0FBSixDQUFVLHdEQUFWLENBQU47QUFDdkM7QUFIWTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUliLGFBQU9KLGlCQUFpQixDQUFDWSxRQUFsQixDQUEyQixLQUFLUCxJQUFoQyxFQUFzQ0ksTUFBdEMsQ0FBUDtBQUNIOzs7Ozs7ZUFHVVAsVSIsInNvdXJjZVJvb3QiOiIvaG9tZS9pc2FhYy9QZXJzb25hbC9wYXJzZXJzLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEJvb2xlYW4gRXhwcmVzc2lvbnMgUGFyc2VyL0V2YWx1YXRvclxuXG5pbXBvcnQgRXZhbHVhdG9yIGZyb20gJy4vZXZhbHVhdG9yJztcblxuY29uc3QgT1BFUkFUT1IgPSB7XG5cdC8vIG9wZXJhdG9yIHByZWNlZGVuY2Vcblx0JyonOiB7XG4gICAgICAgIHByZWNlZGVuY2U6IDIsXG4gICAgICAgIGJpbmFyeTogdHJ1ZSxcbiAgICAgICAgdW5hcnk6IGZhbHNlLFxuXHRcdGZuOiAoYSwgYikgPT4gYSAmJiBiXG5cdH0sXG5cdCcrJzoge1xuICAgICAgICBwcmVjZWRlbmNlOiAxLFxuICAgICAgICBiaW5hcnk6IHRydWUsXG4gICAgICAgIHVuYXJ5OiBmYWxzZSxcblx0XHRmbjogKGEsIGIpID0+IGEgfHwgYlxuICAgIH0sXG4gICAgJ34nOiB7XG4gICAgICAgIGJpbmFyeTogZmFsc2UsXG4gICAgICAgIHVuYXJ5OiB0cnVlLFxuICAgICAgICB1Zm46IGEgPT4gIWFcbiAgICB9XG59O1xuXG5jb25zdCBCT09MRUFOX0VWQUxVQVRPUiA9IG5ldyBFdmFsdWF0b3IoT1BFUkFUT1IpO1xuXG5jbGFzcyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihleHApIHtcbiAgICAgICAgaWYoIHR5cGVvZiBleHAgIT09ICdzdHJpbmcnICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwcmVzc2lvbiBjb25zdHJ1Y3RvciB0YWtlcyBpbiBhIGJvb2xlYW4gZXhwcmVzc2lvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmVlID0gQk9PTEVBTl9FVkFMVUFUT1IucGFyc2VyLnBhcnNlKGV4cCk7XG4gICAgfVxuICAgIGdldFRva2VucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlZS50b2tlbnM7XG4gICAgfVxuICAgIGV2YWx1YXRlKHZhbHVlcykge1xuICAgICAgICBmb3IoIGxldCB0b2tlbiBvZiB0aGlzLnRyZWUudG9rZW5zICkge1xuICAgICAgICAgICAgaWYoICF2YWx1ZXMuaGFzT3duUHJvcGVydHkodG9rZW4pICkgdGhyb3cgbmV3IEVycm9yKFwidmFsdWVzIG11c3QgZGVmaW5lIGEgYm9vbGVhbiB2YWx1ZSBmb3IgZXZlcnkgdmFyaWFibGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCT09MRUFOX0VWQUxVQVRPUi5ldmFsdWF0ZSh0aGlzLnRyZWUsIHZhbHVlcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHByZXNzaW9uOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "boolexp.js"
      ],
      "names": [
        "OPERATOR",
        "precedence",
        "binary",
        "unary",
        "fn",
        "a",
        "b",
        "ufn",
        "BOOLEAN_EVALUATOR",
        "Evaluator",
        "Expression",
        "exp",
        "Error",
        "tree",
        "parser",
        "parse",
        "tokens",
        "values",
        "token",
        "hasOwnProperty",
        "evaluate"
      ],
      "mappings": ";;;;;;;AAEA;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG;AAChB;AACA,OAAK;AACEC,IAAAA,UAAU,EAAE,CADd;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGEC,IAAAA,KAAK,EAAE,KAHT;AAIJC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,IAAIC,CAAf;AAAA;AAJA,GAFW;AAQhB,OAAK;AACEL,IAAAA,UAAU,EAAE,CADd;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGEC,IAAAA,KAAK,EAAE,KAHT;AAIJC,IAAAA,EAAE,EAAE,YAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUD,CAAC,IAAIC,CAAf;AAAA;AAJA,GARW;AAcb,OAAK;AACDJ,IAAAA,MAAM,EAAE,KADP;AAEDC,IAAAA,KAAK,EAAE,IAFN;AAGDI,IAAAA,GAAG,EAAE,aAAAF,CAAC;AAAA,aAAI,CAACA,CAAL;AAAA;AAHL;AAdQ,CAAjB;AAqBA,IAAMG,iBAAiB,GAAG,IAAIC,qBAAJ,CAAcT,QAAd,CAA1B;;IAEMU,U;AACF,sBAAYC,GAAZ,EAAiB;AAAA;;AACb,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA8B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AACD,SAAKC,IAAL,GAAYL,iBAAiB,CAACM,MAAlB,CAAyBC,KAAzB,CAA+BJ,GAA/B,CAAZ;AACH;;;;gCACW;AACR,aAAO,KAAKE,IAAL,CAAUG,MAAjB;AACH;;;6BACQC,M,EAAQ;AAAA,iDACK,KAAKJ,IAAL,CAAUG,MADf;AAAA;;AAAA;AACb,4DAAqC;AAAA,cAA5BE,KAA4B;AACjC,cAAI,CAACD,MAAM,CAACE,cAAP,CAAsBD,KAAtB,CAAL,EAAoC,MAAM,IAAIN,KAAJ,CAAU,wDAAV,CAAN;AACvC;AAHY;AAAA;AAAA;AAAA;AAAA;;AAIb,aAAOJ,iBAAiB,CAACY,QAAlB,CAA2B,KAAKP,IAAhC,EAAsCI,MAAtC,CAAP;AACH;;;;;;eAGUP,U",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "// Boolean Expressions Parser/Evaluator\n\nimport Evaluator from './evaluator';\n\nconst OPERATOR = {\n\t// operator precedence\n\t'*': {\n        precedence: 2,\n        binary: true,\n        unary: false,\n\t\tfn: (a, b) => a && b\n\t},\n\t'+': {\n        precedence: 1,\n        binary: true,\n        unary: false,\n\t\tfn: (a, b) => a || b\n    },\n    '~': {\n        binary: false,\n        unary: true,\n        ufn: a => !a\n    }\n};\n\nconst BOOLEAN_EVALUATOR = new Evaluator(OPERATOR);\n\nclass Expression {\n    constructor(exp) {\n        if( typeof exp !== 'string' ) {\n            throw new Error(\"Expression constructor takes in a boolean expression.\");\n        }\n        this.tree = BOOLEAN_EVALUATOR.parser.parse(exp);\n    }\n    getTokens() {\n        return this.tree.tokens;\n    }\n    evaluate(values) {\n        for( let token of this.tree.tokens ) {\n            if( !values.hasOwnProperty(token) ) throw new Error(\"values must define a boolean value for every variable.\");\n        }\n        return BOOLEAN_EVALUATOR.evaluate(this.tree, values);\n    }\n}\n\nexport default Expression;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591407415386
  }
}