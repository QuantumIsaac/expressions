{
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/boolexp.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/boolexp.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/boolexp.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/boolexp.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "boolexp.js"
      }
    },
    "ast": null,
    "code": "// Boolean Expressions Parser/Evaluator\nconst OPERATOR = {\n  // operator precedence\n  '*': {\n    precedence: 2,\n    binary: true,\n    fn: (a, b) => a && b\n  },\n  '+': {\n    precedence: 1,\n    binary: true,\n    fn: (a, b) => a || b\n  },\n  '~': {\n    binary: false,\n    fn: a => !a\n  }\n};\n\nconst isBinaryOperator = chr => Object.keys(OPERATOR).filter(op => op.binary).includes(chr);\n\nconst isUnaryOperator = chr => Object.keys(OPERATOR).filter(op => !op.binary).includes(chr);\n\nconst stackify = arr => {\n  arr = arr || [];\n\n  arr.peek = () => arr[arr.length - 1];\n\n  return arr;\n};\n\nconst makeTreeNode = (op, a, b) => {\n  return {\n    value: op,\n    children: [a, b]\n  };\n};\n\nconst parseExpression = exp => {\n  const operator_stack = stackify();\n  const operand_stack = stackify();\n  let unique_tokens = [];\n  let token = '';\n  let unaryOp = 0;\n\n  const pushToken = () => {\n    operand_stack.push(token);\n    aggregateUnaryOp();\n    if (!unique_tokens.includes(token)) unique_tokens.push(token);\n    token = '';\n  };\n\n  const aggregateUnaryOp = () => {\n    while (unaryOp > 0) {\n      let op = operator_stack.pop();\n      let operand = operand_stack.pop();\n      operand_stack.push({\n        value: op,\n        children: [operand]\n      });\n      unaryOp--;\n    }\n  };\n\n  let grabbingExpression = false;\n  let expression = '';\n  let expParen = 0;\n\n  for (let char of exp) {\n    // first check if grabbing expression\n    if (grabbingExpression) {\n      if (char === '(') {\n        expParen++;\n        expression += '(';\n      } else if (char === ')') {\n        expParen--;\n\n        if (expParen === 0) {\n          let exp = parseExpression(expression);\n          let exp_tk = exp.tokens;\n\n          for (let token of exp_tk) {\n            if (!unique_tokens.includes(token)) unique_tokens.push(token);\n          }\n\n          delete exp.tokens; // remove extraneous data from internal tree nodes\n\n          operand_stack.push(exp);\n          aggregateUnaryOp();\n          expression = '';\n          grabbingExpression = false;\n        } else {\n          expression += ')';\n        }\n      } else expression += char;\n\n      continue;\n    }\n\n    if (/\\s/.test(char)) {\n      if (token !== '') pushToken();\n    } else if (/[a-zA-Z0-9_]/.test(char)) {\n      token += char;\n    } else {\n      if (token !== '') pushToken();\n\n      if (isBinaryOperator(char)) {\n        if (operator_stack.length > 0 && OPERATOR[char].precedence < OPERATOR[operator_stack.peek()].precedence) {\n          const op1 = operand_stack.pop();\n          const op2 = operand_stack.pop();\n          const op = operator_stack.pop();\n          operand_stack.push(makeTreeNode(op, op1, op2));\n        }\n\n        operator_stack.push(char);\n      } else if (isUnaryOperator(char)) {\n        unaryOp++;\n        operator_stack.push(char);\n      } else if (char === '(') {\n        grabbingExpression = true;\n        expParen++;\n      } else {\n        throw new Error(`Unexpected character '${char}'`);\n      }\n    }\n  }\n\n  if (grabbingExpression) {\n    throw new Error('Expression contains unmatched opening parenthesis.');\n  }\n\n  if (token !== '') pushToken();\n\n  while (operator_stack.length > 0) {\n    let op1 = operand_stack.pop();\n    let op2 = operand_stack.pop();\n    let op = operator_stack.pop();\n    operand_stack.push(makeTreeNode(op, op1, op2));\n  }\n\n  if (operand_stack.length > 1) {\n    throw new Error('Too many operands!');\n  }\n\n  let retObj = operand_stack[0];\n\n  if (typeof retObj === 'string') {\n    retObj = {\n      value: retObj,\n      children: []\n    };\n  }\n\n  retObj.tokens = unique_tokens;\n  return operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nfunction evaluateTree(treeHead, values) {\n  values[true] = true;\n  values[false] = false;\n\n  if (typeof treeHead === 'string') {\n    if (treeHead[0] === '~') {\n      return !values[treeHead[0].substring(1)];\n    } else {\n      return values[treeHead[0]];\n    }\n  }\n\n  let maybeInvert = val => treeHead.invert ? !val : val;\n\n  let op = treeHead.value;\n  let op1 = treeHead.children[0];\n  let op2 = treeHead.children[1];\n  let operand1;\n  let operand2;\n\n  if (typeof op1 === 'object') {\n    operand1 = evaluateTree(op1, values);\n  }\n\n  if (typeof op2 === 'object') {\n    operand2 = evaluateTree(op2, values);\n  }\n\n  if (typeof op1 === \"string\") {\n    if (op1[0] === '~') {\n      operand1 = !values[op1.substring(1)];\n    } else {\n      operand1 = values[op1];\n    }\n  }\n\n  if (typeof op2 === \"string\") {\n    if (op2[0] === '~') {\n      operand2 = !values[op2.substring(1)];\n    } else {\n      operand2 = values[op2];\n    }\n  }\n\n  return maybeInvert(OPERATOR[op].fn(operand1, operand2));\n}\n\n;\nexport { parseExpression, evaluateTree };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "boolexp.js"
      ],
      "names": [
        "OPERATOR",
        "precedence",
        "binary",
        "fn",
        "a",
        "b",
        "isBinaryOperator",
        "chr",
        "Object",
        "keys",
        "filter",
        "op",
        "includes",
        "isUnaryOperator",
        "stackify",
        "arr",
        "peek",
        "length",
        "makeTreeNode",
        "value",
        "children",
        "parseExpression",
        "exp",
        "operator_stack",
        "operand_stack",
        "unique_tokens",
        "token",
        "unaryOp",
        "pushToken",
        "push",
        "aggregateUnaryOp",
        "pop",
        "operand",
        "grabbingExpression",
        "expression",
        "expParen",
        "char",
        "exp_tk",
        "tokens",
        "test",
        "op1",
        "op2",
        "Error",
        "retObj",
        "evaluateTree",
        "treeHead",
        "values",
        "substring",
        "maybeInvert",
        "val",
        "invert",
        "operand1",
        "operand2"
      ],
      "mappings": "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",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "// Boolean Expressions Parser/Evaluator\n\nconst OPERATOR = {\n\t// operator precedence\n\t'*': {\n        precedence: 2,\n        binary: true,\n\t\tfn: (a, b) => a && b\n\t},\n\t'+': {\n        precedence: 1,\n        binary: true,\n\t\tfn: (a, b) => a || b\n    },\n    '~': {\n        binary: false,\n        fn: a => !a\n    }\n};\n\nconst isBinaryOperator = chr => Object.keys(OPERATOR).filter(op => op.binary).includes(chr);\nconst isUnaryOperator = chr => Object.keys(OPERATOR).filter(op => !op.binary).includes(chr);\nconst stackify = arr => {\n\tarr = arr || [];\n\tarr.peek = () => arr[arr.length-1];\n\treturn arr;\n};\n\nconst makeTreeNode = (op, a, b) => {\n\treturn {\n\t\tvalue: op,\n\t\tchildren: [a, b]\n\t}\n};\n\nconst parseExpression = exp => {\n\tconst operator_stack = stackify();\n\tconst operand_stack = stackify();\n\n\tlet unique_tokens = [];\n\n    let token = '';\n\tlet unaryOp = 0;\n\tconst pushToken = () => {\n        operand_stack.push(token);\n        aggregateUnaryOp();\n\t\tif( !unique_tokens.includes(token) ) unique_tokens.push(token);\n\t\ttoken = '';\n    };\n    \n    const aggregateUnaryOp = () => {\n        while( unaryOp > 0 ) {\n            let op = operator_stack.pop();\n            let operand = operand_stack.pop();\n            operand_stack.push({\n                value: op,\n                children: [operand]\n            });\n            unaryOp--;\n        }\n    };\n\n\tlet grabbingExpression = false;\n\tlet expression = '';\n\tlet expParen = 0;\n\tfor( let char of exp ) {\n\t\t// first check if grabbing expression\n\t\tif( grabbingExpression ) {\n\t\t\tif( char === '(' ) {\n\t\t\t\texpParen++;\n\t\t\t\texpression += '(';\n\t\t\t} else if( char === ')' ) {\n\t\t\t\texpParen--;\n\t\t\t\tif( expParen === 0 ) {\n\t\t\t\t\tlet exp = parseExpression(expression);\n                    let exp_tk = exp.tokens;\n                    for( let token of exp_tk ) {\n                        if( !unique_tokens.includes(token) ) unique_tokens.push(token);\n                    }\n                    delete exp.tokens; // remove extraneous data from internal tree nodes\n                    operand_stack.push(exp);\n                    aggregateUnaryOp();\n\t\t\t\t\texpression = '';\n\t\t\t\t\tgrabbingExpression = false;\n\t\t\t\t} else {\n\t\t\t\t\texpression += ')';\n\t\t\t\t}\n\t\t\t} else expression += char;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( /\\s/.test(char) ) {\n\t\t\tif( token !== '' ) pushToken();\n\t\t} else if( /[a-zA-Z0-9_]/.test(char) ) {\n\t\t\ttoken += char;\n\t\t} else {\n\t\t\tif( token !== '' ) pushToken();\n\t\t\tif( isBinaryOperator(char) ) {\n\t\t\t\tif( operator_stack.length > 0 && OPERATOR[char].precedence < OPERATOR[operator_stack.peek()].precedence ) {\n\t\t\t\t\tconst op1 = operand_stack.pop();\n\t\t\t\t\tconst op2 = operand_stack.pop();\n\t\t\t\t\tconst op = operator_stack.pop();\n\t\t\t\t\toperand_stack.push(makeTreeNode(op, op1, op2));\n\t\t\t\t}\n\t\t\t\toperator_stack.push(char);\n\t\t\t} else if( isUnaryOperator(char) ) {\n                unaryOp++;\n                operator_stack.push(char);\n            }else if( char === '(' ) {\n\t\t\t\tgrabbingExpression = true;\n\t\t\t\texpParen++;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected character '${char}'`);\n\t\t\t}\n\t\t}\n\t}\n\n\tif( grabbingExpression ) {\n\t\tthrow new Error('Expression contains unmatched opening parenthesis.');\n\t}\n\n\tif( token !== '' ) pushToken();\n\n\twhile(operator_stack.length > 0) {\n\t\tlet op1 = operand_stack.pop();\n\t\tlet op2 = operand_stack.pop();\n\t\tlet op = operator_stack.pop();\n\t\toperand_stack.push(makeTreeNode(op, op1, op2));\n\t}\n\tif( operand_stack.length > 1 ) {\n\t\tthrow new Error('Too many operands!');\n    }\n\n    let retObj = operand_stack[0];\n    if( typeof retObj === 'string' ) {\n        retObj = {\n            value: retObj,\n            children: []\n        };\n    }\n\tretObj.tokens = unique_tokens;\n\n\treturn operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nfunction evaluateTree(treeHead, values) {\n\tvalues[true] = true;\n\tvalues[false] = false;\n\n\tif( typeof treeHead === 'string' ) {\n\t\tif( treeHead[0] === '~' ) {\n\t\t\treturn !values[treeHead[0].substring(1)]\n\t\t} else {\n\t\t\treturn values[treeHead[0]];\n\t\t}\n\t}\n\n\tlet maybeInvert = (val) => (treeHead.invert ? !val : val);\n\n\tlet op = treeHead.value;\n\tlet op1 = treeHead.children[0];\n\tlet op2 = treeHead.children[1];\n\n\tlet operand1;\n\tlet operand2;\n\tif( typeof op1 === 'object' ) {\n\t\toperand1 = evaluateTree(op1, values);\n\t}\n\tif( typeof op2 === 'object' ) {\n\t\toperand2 = evaluateTree(op2, values);\n\t}\n\n\tif( typeof op1 === \"string\" ) {\n\t\tif( op1[0] === '~' ) {\n\t\t\toperand1 = !values[op1.substring(1)];\n\t\t} else {\n\t\t\toperand1 = values[op1];\n\t\t}\n\t}\n\tif( typeof op2 === \"string\" ) {\n\t\tif( op2[0] === '~' ) {\n\t\t\toperand2 = !values[op2.substring(1)];\n\t\t} else {\n\t\t\toperand2 = values[op2];\n\t\t}\n\t}\n\n\treturn maybeInvert(OPERATOR[op].fn(operand1, operand2));\n};\n\nexport { parseExpression, evaluateTree };"
      ]
    },
    "sourceType": "module",
    "mtime": 1591211015498
  },
  "{\"sourceRoot\":\"/home/isaac/Personal/parsers/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/isaac/Personal/parsers\",\"filename\":\"/home/isaac/Personal/parsers/boolexp.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/isaac/Personal/parsers\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/isaac/Personal/parsers",
      "filename": "/home/isaac/Personal/parsers/boolexp.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/isaac/Personal/parsers",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/isaac/Personal/parsers/boolexp.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/isaac/Personal/parsers/boolexp.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/isaac/Personal/parsers/",
        "sourceFileName": "boolexp.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Boolean Expressions Parser/Evaluator\nvar OPERATOR = {\n  // operator precedence\n  '*': {\n    precedence: 2,\n    binary: true,\n    fn: function fn(a, b) {\n      return a && b;\n    }\n  },\n  '+': {\n    precedence: 1,\n    binary: true,\n    fn: function fn(a, b) {\n      return a || b;\n    }\n  },\n  '~': {\n    binary: false,\n    fn: function fn(a) {\n      return !a;\n    }\n  }\n};\n\nvar isOperator = function isOperator(chr) {\n  return Object.keys(OPERATOR).includes(chr);\n};\n\nvar isBinaryOperator = function isBinaryOperator(chr) {\n  return Object.keys(OPERATOR).filter(function (op) {\n    return OPERATOR[op].binary;\n  }).includes(chr);\n};\n\nvar isUnaryOperator = function isUnaryOperator(chr) {\n  return Object.keys(OPERATOR).filter(function (op) {\n    return !OPERATOR[op].binary;\n  }).includes(chr);\n};\n\nvar stackify = function stackify(arr) {\n  arr = arr || [];\n\n  arr.peek = function () {\n    return arr[arr.length - 1];\n  };\n\n  return arr;\n};\n\nvar format = function format(tk) {\n  return typeof tk === 'string' ? {\n    value: tk,\n    children: []\n  } : tk;\n};\n\nvar makeTreeNode = function makeTreeNode(op, a, b) {\n  return {\n    value: op,\n    children: [a, b]\n  };\n};\n\nvar parseExpression = function parseExpression(exp) {\n  var operator_stack = stackify();\n  var operand_stack = stackify();\n  var unique_tokens = [];\n  var token = '';\n  var unaryOp = 0;\n\n  var pushToken = function pushToken() {\n    operand_stack.push(token);\n    aggregateUnaryOp();\n    if (!unique_tokens.includes(token)) unique_tokens.push(token);\n    token = '';\n  };\n\n  var aggregateUnaryOp = function aggregateUnaryOp() {\n    while (unaryOp > 0) {\n      var op = operator_stack.pop();\n      var operand = operand_stack.pop();\n      operand_stack.push({\n        value: op,\n        children: [format(operand)]\n      });\n      unaryOp--;\n    }\n  };\n\n  var grabbingExpression = false;\n  var expression = '';\n  var expParen = 0;\n\n  var _iterator = _createForOfIteratorHelper(exp),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _char = _step.value;\n\n      // first check if grabbing expression\n      if (grabbingExpression) {\n        if (_char === '(') {\n          expParen++;\n          expression += '(';\n        } else if (_char === ')') {\n          expParen--;\n\n          if (expParen === 0) {\n            var _exp = parseExpression(expression);\n\n            var exp_tk = _exp.tokens;\n\n            var _iterator2 = _createForOfIteratorHelper(exp_tk),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _token = _step2.value;\n                if (!unique_tokens.includes(_token)) unique_tokens.push(_token);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            delete _exp.tokens; // remove extraneous data from internal tree nodes\n\n            operand_stack.push(_exp);\n            aggregateUnaryOp();\n            expression = '';\n            grabbingExpression = false;\n          } else {\n            expression += ')';\n          }\n        } else expression += _char;\n\n        continue;\n      }\n\n      if (/\\s/.test(_char)) {\n        if (token !== '') pushToken();\n      } else if (/[a-zA-Z0-9_]/.test(_char)) {\n        token += _char;\n      } else {\n        if (token !== '') pushToken();\n\n        if (isBinaryOperator(_char)) {\n          if (operator_stack.length > 0 && OPERATOR[_char].precedence < OPERATOR[operator_stack.peek()].precedence) {\n            var _op = operand_stack.pop();\n\n            var _op2 = operand_stack.pop();\n\n            var _op3 = operator_stack.pop();\n\n            operand_stack.push(makeTreeNode(_op3, _op, _op2));\n          }\n\n          operator_stack.push(_char);\n        } else if (isUnaryOperator(_char)) {\n          unaryOp++;\n          operator_stack.push(_char);\n        } else if (_char === '(') {\n          grabbingExpression = true;\n          expParen++;\n        } else {\n          throw new Error(\"Unexpected character '\".concat(_char, \"'\"));\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (grabbingExpression) {\n    throw new Error('Expression contains unmatched opening parenthesis.');\n  }\n\n  if (token !== '') pushToken();\n\n  while (operator_stack.length > 0) {\n    var op1 = format(operand_stack.pop());\n    var op2 = format(operand_stack.pop());\n    var op = operator_stack.pop();\n    operand_stack.push(makeTreeNode(op, op1, op2));\n  }\n\n  if (operand_stack.length > 1) {\n    throw new Error('Too many operands!');\n  }\n\n  var retObj = format(operand_stack[0]);\n  retObj.tokens = unique_tokens;\n  return operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nvar Expression = /*#__PURE__*/function () {\n  function Expression(exp) {\n    _classCallCheck(this, Expression);\n\n    if (typeof exp !== 'string') {\n      throw new Error(\"Expression constructor takes in a boolean expression.\");\n    }\n\n    this.tree = parseExpression(exp);\n  }\n\n  _createClass(Expression, [{\n    key: \"getTokens\",\n    value: function getTokens() {\n      return this.tree.tokens;\n    }\n  }, {\n    key: \"evaluate\",\n    value: function evaluate(values) {\n      var _iterator3 = _createForOfIteratorHelper(this.tree.tokens),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var token = _step3.value;\n          if (!values.hasOwnProperty(token)) throw new Error(\"values must define a boolean value for every variable.\");\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return evaluateTree(this.tree, values);\n    }\n  }]);\n\n  return Expression;\n}();\n\nfunction evaluateTree(treeHead, values) {\n  var v = treeHead.value;\n\n  if (isOperator(v)) {\n    var children = treeHead.children.map(function (t) {\n      return evaluateTree(t, values);\n    });\n    var opfn = OPERATOR[v].fn;\n    return opfn.apply(void 0, _toConsumableArray(children));\n  } else {\n    return values[v];\n  }\n}\n\n;\nvar _default = Expression;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "boolexp.js"
      ],
      "names": [
        "OPERATOR",
        "precedence",
        "binary",
        "fn",
        "a",
        "b",
        "isOperator",
        "chr",
        "Object",
        "keys",
        "includes",
        "isBinaryOperator",
        "filter",
        "op",
        "isUnaryOperator",
        "stackify",
        "arr",
        "peek",
        "length",
        "format",
        "tk",
        "value",
        "children",
        "makeTreeNode",
        "parseExpression",
        "exp",
        "operator_stack",
        "operand_stack",
        "unique_tokens",
        "token",
        "unaryOp",
        "pushToken",
        "push",
        "aggregateUnaryOp",
        "pop",
        "operand",
        "grabbingExpression",
        "expression",
        "expParen",
        "char",
        "exp_tk",
        "tokens",
        "test",
        "op1",
        "op2",
        "Error",
        "retObj",
        "Expression",
        "tree",
        "values",
        "hasOwnProperty",
        "evaluateTree",
        "treeHead",
        "v",
        "map",
        "t",
        "opfn"
      ],
      "mappings": "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",
      "sourceRoot": "/home/isaac/Personal/parsers/",
      "sourcesContent": [
        "// Boolean Expressions Parser/Evaluator\n\nconst OPERATOR = {\n\t// operator precedence\n\t'*': {\n        precedence: 2,\n        binary: true,\n\t\tfn: (a, b) => a && b\n\t},\n\t'+': {\n        precedence: 1,\n        binary: true,\n\t\tfn: (a, b) => a || b\n    },\n    '~': {\n        binary: false,\n        fn: a => !a\n    }\n};\n\nconst isOperator = chr => Object.keys(OPERATOR).includes(chr);\nconst isBinaryOperator = chr => Object.keys(OPERATOR).filter(op => OPERATOR[op].binary).includes(chr);\nconst isUnaryOperator = chr => Object.keys(OPERATOR).filter(op => !OPERATOR[op].binary).includes(chr);\nconst stackify = arr => {\n\tarr = arr || [];\n\tarr.peek = () => arr[arr.length-1];\n\treturn arr;\n};\n\nconst format = (tk) => typeof tk === 'string' ? { value: tk, children: [] } : tk;\n\nconst makeTreeNode = (op, a, b) => {\n\treturn {\n\t\tvalue: op,\n\t\tchildren: [a, b]\n\t}\n};\n\nconst parseExpression = exp => {\n\tconst operator_stack = stackify();\n\tconst operand_stack = stackify();\n\n\tlet unique_tokens = [];\n\n    let token = '';\n\tlet unaryOp = 0;\n\tconst pushToken = () => {\n        operand_stack.push(token);\n        aggregateUnaryOp();\n\t\tif( !unique_tokens.includes(token) ) unique_tokens.push(token);\n\t\ttoken = '';\n    };\n    \n    const aggregateUnaryOp = () => {\n        while( unaryOp > 0 ) {\n            let op = operator_stack.pop();\n            let operand = operand_stack.pop();\n            operand_stack.push({\n                value: op,\n                children: [format(operand)]\n            });\n            unaryOp--;\n        }\n    };\n\n\tlet grabbingExpression = false;\n\tlet expression = '';\n\tlet expParen = 0;\n\tfor( let char of exp ) {\n\t\t// first check if grabbing expression\n\t\tif( grabbingExpression ) {\n\t\t\tif( char === '(' ) {\n\t\t\t\texpParen++;\n\t\t\t\texpression += '(';\n\t\t\t} else if( char === ')' ) {\n\t\t\t\texpParen--;\n\t\t\t\tif( expParen === 0 ) {\n\t\t\t\t\tlet exp = parseExpression(expression);\n                    let exp_tk = exp.tokens;\n                    for( let token of exp_tk ) {\n                        if( !unique_tokens.includes(token) ) unique_tokens.push(token);\n                    }\n                    delete exp.tokens; // remove extraneous data from internal tree nodes\n                    operand_stack.push(exp);\n                    aggregateUnaryOp();\n\t\t\t\t\texpression = '';\n\t\t\t\t\tgrabbingExpression = false;\n\t\t\t\t} else {\n\t\t\t\t\texpression += ')';\n\t\t\t\t}\n\t\t\t} else expression += char;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( /\\s/.test(char) ) {\n\t\t\tif( token !== '' ) pushToken();\n\t\t} else if( /[a-zA-Z0-9_]/.test(char) ) {\n\t\t\ttoken += char;\n\t\t} else {\n\t\t\tif( token !== '' ) pushToken();\n\t\t\tif( isBinaryOperator(char) ) {\n\t\t\t\tif( operator_stack.length > 0 && OPERATOR[char].precedence < OPERATOR[operator_stack.peek()].precedence ) {\n\t\t\t\t\tconst op1 = operand_stack.pop();\n\t\t\t\t\tconst op2 = operand_stack.pop();\n\t\t\t\t\tconst op = operator_stack.pop();\n\t\t\t\t\toperand_stack.push(makeTreeNode(op, op1, op2));\n\t\t\t\t}\n\t\t\t\toperator_stack.push(char);\n\t\t\t} else if( isUnaryOperator(char) ) {\n                unaryOp++;\n                operator_stack.push(char);\n            }else if( char === '(' ) {\n\t\t\t\tgrabbingExpression = true;\n\t\t\t\texpParen++;\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unexpected character '${char}'`);\n\t\t\t}\n\t\t}\n\t}\n\n\tif( grabbingExpression ) {\n\t\tthrow new Error('Expression contains unmatched opening parenthesis.');\n\t}\n\n\tif( token !== '' ) pushToken();\n\n\twhile(operator_stack.length > 0) {\n\t\tlet op1 = format(operand_stack.pop());\n\t\tlet op2 = format(operand_stack.pop());\n        let op = operator_stack.pop();\n\n\t\toperand_stack.push(makeTreeNode(op, op1, op2));\n\t}\n\tif( operand_stack.length > 1 ) {\n\t\tthrow new Error('Too many operands!');\n    }\n\n    let retObj = format(operand_stack[0]);\n\tretObj.tokens = unique_tokens;\n\n\treturn operand_stack[0]; // should be the expression tree (or a single-token string)\n};\n\nclass Expression {\n    constructor(exp) {\n        if( typeof exp !== 'string' ) {\n            throw new Error(\"Expression constructor takes in a boolean expression.\");\n        }\n        this.tree = parseExpression(exp);\n    }\n    getTokens() {\n        return this.tree.tokens;\n    }\n    evaluate(values) {\n        for( let token of this.tree.tokens ) {\n            if( !values.hasOwnProperty(token) ) throw new Error(\"values must define a boolean value for every variable.\");\n        }\n        return evaluateTree(this.tree, values);\n    }\n}\n\nfunction evaluateTree(treeHead, values) {\n    let v = treeHead.value;\n    if( isOperator(v) ) {\n        let children = treeHead.children.map(t => evaluateTree(t, values));\n        let opfn = OPERATOR[v].fn;\n        return opfn(...children);\n    } else {\n        return values[v];\n    }\n};\n\nexport default Expression;"
      ]
    },
    "sourceType": "script",
    "mtime": 1591213652603
  }
}